<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wuyang的个人博客</title>
  <icon>https://www.gravatar.com/avatar/6f47db07a0d6abe5a5df442e6524d575</icon>
  <subtitle>Live long and Prosper!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wuyang910217.github.io/"/>
  <updated>2019-01-06T02:53:19.588Z</updated>
  <id>http://wuyang910217.github.io/</id>
  
  <author>
    <name>wuyang</name>
    <email>wuyang910217@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>总结一下我看过的电视-电影-书等</title>
    <link href="http://wuyang910217.github.io/2019/01/06/summaryforyear.html"/>
    <id>http://wuyang910217.github.io/2019/01/06/summaryforyear.html</id>
    <published>2019-01-06T02:36:11.000Z</published>
    <updated>2019-01-06T02:53:19.588Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>总结一下我看过的经典的、打动人心的电视，电影，书等</p></blockquote><a id="more"></a><h2 id="电视"><a href="#电视" class="headerlink" title="电视"></a>电视</h2><ul><li>老友记</li><li>老爸老妈浪漫史</li><li>请回答 1988</li><li>神秘博士</li><li>星际迷航</li></ul><h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><ul><li>肖申克的救赎</li><li>触不可及</li><li>返老还童</li><li>v~字~仇~杀~队</li><li>消失的爱人</li><li>勇敢的心</li><li>香水-一个谋杀犯的故事</li><li>~熔~炉~（韩国）</li><li>出~租~车~司~机（韩国）</li><li>1987~黎~明~到~来~的~那~一~天（韩国）</li><li>疯狂的石头</li><li>阳光灿烂的日子</li><li>霸王别姬</li></ul><h1 id="书"><a href="#书" class="headerlink" title="书"></a>书</h1><ul><li>雁飞残月天</li><li>蛮荒三部曲</li><li>银河帝国系列</li><li>三体</li></ul><h1 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h1><ul><li>三位一体</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;总结一下我看过的经典的、打动人心的电视，电影，书等&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书" scheme="http://wuyang910217.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="总结" scheme="http://wuyang910217.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>博客中使用gitment添加评论功能</title>
    <link href="http://wuyang910217.github.io/2019/01/03/gitment.html"/>
    <id>http://wuyang910217.github.io/2019/01/03/gitment.html</id>
    <published>2019-01-03T11:33:15.000Z</published>
    <updated>2019-01-06T02:34:57.951Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>准备重新开始使用博客 hexo 的命令都快忘完了 记录一下</p><a id="more"></a><h2 id="gitment-评论"><a href="#gitment-评论" class="headerlink" title="gitment 评论"></a>gitment 评论</h2><p>使用 gitment 提供的评论功能，评论是以 issue 的形式记录在 github 仓库里<br>地址：<a href="https://github.com/wuyang910217/blog-comments/issues" target="_blank" rel="noopener">https://github.com/wuyang910217/blog-comments/issues</a></p><h2 id="hexo-常用命令"><a href="#hexo-常用命令" class="headerlink" title="hexo 常用命令"></a>hexo 常用命令</h2><p>首先需要安装 hexo <code>npm i -g hexo</code><br>创建新文章：<code>hexo new post-title</code> 后面不加.md</p><h2 id="部署到-github-和-gitlab"><a href="#部署到-github-和-gitlab" class="headerlink" title="部署到 github 和 gitlab"></a>部署到 github 和 gitlab</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存为shell脚本</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'update'</span></span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="文章模板"><a href="#文章模板" class="headerlink" title="文章模板"></a>文章模板</h2><p>在<code>scafflods/post.md</code>添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: [Others]</span><br><span class="line">tags: [default]</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># 简介</span><br><span class="line"></span><br><span class="line">&gt; Space: the final frontier. These are the voyages of the starship Enterprise. Its five-year mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no man has gone before.</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">## section1</span><br><span class="line"></span><br><span class="line">&gt; Space: the final frontier. These are the voyages of the starship Enterprise. Its five-year mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no man has gone before.</span><br><span class="line"></span><br><span class="line">## section2</span><br><span class="line"></span><br><span class="line">1. Space: the final frontier.</span><br><span class="line">2. These are the voyages of the starship Enterprise.</span><br><span class="line">3. Its five-year mission: to explore strange new worlds,</span><br><span class="line">4. to seek out new life and new civilizations,</span><br><span class="line">5. to boldly go where no man has gone before.</span><br><span class="line"></span><br><span class="line">## section3</span><br><span class="line"></span><br><span class="line">- Space: the final frontier.</span><br><span class="line">- These are the voyages of the starship Enterprise.</span><br><span class="line">- Its five-year mission: to explore strange new worlds,</span><br><span class="line">- to seek out new life and new civilizations,</span><br><span class="line">- to boldly go where no man has gone before.</span><br><span class="line"></span><br><span class="line">## 总结</span><br><span class="line"></span><br><span class="line">[Link](https://wuyang910217.github.io)</span><br><span class="line"></span><br><span class="line">![Image]()</span><br></pre></td></tr></table></figure><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p>部署到 github 的内容是 html 格式的，而我们的博客源文件（包括 hexo 配置 PWA 支持 主题修改等）需要 push 到私有仓库</p><p>我的博客源文件（hexo 整个项目）是存在 gitlab 上的</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;准备重新开始使用博客 hexo 的命令都快忘完了 记录一下&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="http://wuyang910217.github.io/categories/Others/"/>
    
    
      <category term="gitment" scheme="http://wuyang910217.github.io/tags/gitment/"/>
    
  </entry>
  
  <entry>
    <title>博客文章模板</title>
    <link href="http://wuyang910217.github.io/2017/04/10/test.html"/>
    <id>http://wuyang910217.github.io/2017/04/10/test.html</id>
    <published>2017-04-10T13:27:39.000Z</published>
    <updated>2019-01-06T02:29:18.181Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>Space: the final frontier. These are the voyages of the starship Enterprise. Its five-year mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no man has gone before.</p></blockquote><a id="more"></a><h3 id="section1"><a href="#section1" class="headerlink" title="section1"></a>section1</h3><blockquote><p>Space: the final frontier. These are the voyages of the starship Enterprise. Its five-year mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no man has gone before.</p></blockquote><h3 id="section2"><a href="#section2" class="headerlink" title="section2"></a>section2</h3><ol><li>Space: the final frontier.</li><li>These are the voyages of the starship Enterprise.</li><li>Its five-year mission: to explore strange new worlds,</li><li>to seek out new life and new civilizations,</li><li>to boldly go where no man has gone before.</li></ol><h3 id="section3"><a href="#section3" class="headerlink" title="section3"></a>section3</h3><ul><li>Space: the final frontier.</li><li>These are the voyages of the starship Enterprise.</li><li>Its five-year mission: to explore strange new worlds,</li><li>to seek out new life and new civilizations,</li><li>to boldly go where no man has gone before.</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><a href="">Link</a></p><p><img src="" alt="Image"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;Space: the final frontier. These are the voyages of the starship Enterprise. Its five-year mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no man has gone before.&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Others" scheme="http://wuyang910217.github.io/categories/Others/"/>
    
    
      <category term="default" scheme="http://wuyang910217.github.io/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>Mac上的实用软件</title>
    <link href="http://wuyang910217.github.io/2017/03/09/mac-useful-software.html"/>
    <id>http://wuyang910217.github.io/2017/03/09/mac-useful-software.html</id>
    <published>2017-03-09T03:47:19.000Z</published>
    <updated>2019-01-06T02:29:18.176Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>Mac上的实用软件</p></blockquote><a id="more"></a><h3 id="程序相关"><a href="#程序相关" class="headerlink" title="程序相关"></a>程序相关</h3><ul><li>vscode 编辑器</li><li>Sublime text3 编辑器</li><li>Virtual box 虚拟机</li><li>Postman 编写和测试API</li><li>Robomongo mongo的图形化显示</li><li>Mongochef mongo的图形化显示</li><li>Dash 查询常见语言和程序的文档API</li><li>iterm2 终端</li></ul><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><ul><li>Spotlight 系统自带 cmd+空格</li><li>Alfred3</li><li>Magnet 组织窗口</li><li>Manico 程序间快速切换</li><li>jietu 腾讯出品</li><li>Popclip 系统级 选中文字后出现多项操作选项</li><li>Bartender2 把mac菜单栏中的图标统一管理</li><li>Paste 储存复制的内容，用于其他的地方粘贴</li><li>Jitouch 强大的手势</li><li>CheatSheet 显示快捷键</li></ul><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><ul><li>iStat Menus 显示系统信息，CPU，内存等</li><li>坚果云 云端同步</li><li>1password 密码管理</li><li>Movist 视频播放工具</li><li>云梯vpn mac客户端</li><li>ShadowsocksX vpn代理</li><li>Usage 记录软件使用时间</li><li>Timing 更强大 记录软件使用时间</li><li>Flux 根据时间调整屏幕亮度</li><li>Fliqlo 屏保 显示时间</li><li>APP Cleaner/Dr. Cleaner/CleanMyMac3 系统清理</li><li>tickeys 模拟机械键盘声音</li><li>amphetamine 保持mac不休眠</li><li>Boom2 系统级音频增强工具</li><li>Folx go 下载工具 集成于浏览器中</li><li>BetterZip 解压软件</li><li>SiteSucker 扒站利器</li><li>Sip 屏幕颜色采集器</li><li>LyricsX 给itunes显示歌词</li></ul><h3 id="写作办公"><a href="#写作办公" class="headerlink" title="写作办公"></a>写作办公</h3><ul><li>为知笔记</li><li>Quiver 程序员用markdown笔记</li><li>MacDown 书写markdown</li><li>OmniFocus 专注 效率 代办事项</li><li>Fantastical2 好用的日历提醒</li><li>Airmail3 邮件客户端</li><li>PDF expert pdf阅读</li><li>Reeder rss客户端</li><li>Day one 日记本</li><li>Klib 整理kindle中标注的内容，可转为markdown</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>Mockplus 原型图设计</li><li>Sketch UI设计</li><li>MindNode 思维导图</li><li>Blender 3D设计软件</li><li>Noizio 模拟常见声音 如雨声</li><li>Tweetbot Twitter客户端</li><li>xScope 测量屏幕等工具集合</li><li>Charles 抓包工具</li><li>Instacast/Downcast 收听podcast播客</li><li>ScreenFlow 录屏工具</li><li>Popcorn time 观看tv</li><li>telegram 聊天工具</li><li>gimp 开源图片处理工具</li><li>inkscape 矢量图绘制软件</li><li>Krita 手绘软件</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;Mac上的实用软件&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://wuyang910217.github.io/categories/Tools/"/>
    
    
      <category term="mac" scheme="http://wuyang910217.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Meteor中使用antd/antd-mobile</title>
    <link href="http://wuyang910217.github.io/2016/12/14/use-ant-design-in-meteor.html"/>
    <id>http://wuyang910217.github.io/2016/12/14/use-ant-design-in-meteor.html</id>
    <published>2016-12-14T01:58:48.000Z</published>
    <updated>2019-01-06T02:29:18.182Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>我们的项目使用的技术栈是<code>Meteor</code>和<code>React全家桶</code>，前端UI库用的是<code>Bootstrap</code>．最近经人介绍了解到阿里蚂蚁金服前端团队出品的<code>antd</code>和<code>antd-mobile</code>，<a id="more"></a>基于<code>React</code>和<code>TypeScript</code>开发，提供了很多实用的组件，基本满足所有常见场景的前端设计和实现．</p><p>其中<code>antd-mobile</code>是<code>antd</code>的移动端实现，支持<code>React-Native</code>．</p><p>传送门：</p><ul><li><a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">antd</a></li><li><a href="https://mobile.ant.design/docs/react/introduce" target="_blank" rel="noopener">antd-mobile</a></li></ul><h3 id="在Meteor中使用antd"><a href="#在Meteor中使用antd" class="headerlink" title="在Meteor中使用antd"></a>在Meteor中使用antd</h3><p>在<code>Meteor</code>中使用<code>antd</code>很简单，只需按照其官方文档安装<code>antd babel-plugin-import</code>，并配置<code>.babelrc</code>文件．如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">meteor npm install --save antd</span><br><span class="line">meteor npm install --save-dev babel-plugin-<span class="keyword">import</span></span><br><span class="line"><span class="comment">//.babelrc文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"import"</span>, [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"libraryName"</span>: <span class="string">"antd"</span>,</span><br><span class="line">        <span class="string">"style"</span>: <span class="string">"css"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="string">"react"</span>,</span><br><span class="line">    <span class="string">"stage-0"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>style</code>一项，填写为<code>true</code>会报错，填写为<code>css</code>则正常．然后在项目中我们就可以直接引入各个组件，这个插件会自动按需加载需要的<code>js</code>和<code>css</code>文件．简单例子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DatePicker, Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;DatePicker /&gt;</span><br><span class="line">        &lt;Button type=<span class="string">'primary'</span>&gt;Sure&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>Meteor React</code>这种单页面应用，分页很令人头疼，一般都是做成无限向下滚动，没有分页功能．而<code>antd</code>提供了<code>Pagination</code>组件，并且在展示很多数据的<code>Table</code>组件里，只需添加一个参数，就能实现分页功能，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Table columns=&#123;columns&#125; dataSource=&#123;data&#125; pagination=&#123;&#123; <span class="attr">pageSize</span>: <span class="number">30</span> &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure><h4 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h4><p>在使用<code>Popconfirm</code>组件时，按照其文档的写法，一直都是刷新页面后，其组件会自动执行，比如我在测试时，添加了100个用户，并提供了删除命令，用<code>Popconfirm</code>组件包裹，本来是当管理员点击删除，并确定后，再删除用户，可结果是刷新页面后，删除命令自动执行了，不到２秒，把100个用户全都删除了．</p><p>原本写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Popconfirm title=<span class="string">"确定要删除吗？"</span> </span><br><span class="line">  onConfirm=&#123;<span class="keyword">this</span>.handleConfirm(user._id)&#125; &gt;</span><br><span class="line">  &lt;a href=<span class="string">'#'</span>&gt;删除&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Popconfirm&gt;</span><br><span class="line"></span><br><span class="line">handleConfirm(id)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dispatch, deleteUser &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  dispatch(deleteUser(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始以为要加<code>event</code>事件，<code>onConfirm={(e) =&gt; this.handleConfirm(e, user._id)}</code>，然后在<code>handleConfirm(e, id){}</code>里添加<code>e.preventDefault()</code>，尝试后发现不行，一直报错．最后又尝试了好久，发现要这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Popconfirm title=<span class="string">"确定要删除吗？"</span> </span><br><span class="line">  onConfirm=&#123;() =&gt; <span class="keyword">this</span>.handleConfirm(user._id)&#125; &gt;</span><br><span class="line">  &lt;a href=<span class="string">'#'</span>&gt;删除&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Popconfirm&gt;</span><br><span class="line"></span><br><span class="line">handleConfirm(id)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dispatch, deleteUser &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  dispatch(deleteUser(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需用箭头函数包裹，不用传递event事件，完美解决．</p><h3 id="在Meteor中使用antd-mobile"><a href="#在Meteor中使用antd-mobile" class="headerlink" title="在Meteor中使用antd-mobile"></a>在Meteor中使用antd-mobile</h3><p><code>antd-mobile</code>目前含有<code>web</code>版和<code>react-native</code>版，并且没有分开，导致很容易出现依赖问题，比如我不需要<code>react-native</code>，但是它一直提示需要安装<code>react-native</code>，关键是安装后，仍然报错，让人崩溃．</p><p>在<code>Meteor</code>中使用<code>antd-mobile</code>，麻烦很多，其实不只是<code>Meteor</code>,其<code>Github issues</code>里有大量类似的问题，总结起来两大类，见<a href="https://github.com/ant-design/ant-design-mobile/issues/602" target="_blank" rel="noopener">issues #602</a>:</p><ol><li>找不到模块<code>antd-mobile</code>或者找不到引入的具体组件</li><li>提示依赖<code>react-native</code></li></ol><p>其给出了具体的办法，但是仍然不能成功，现阶段解决办法就是在项目中直接引入其<code>dist</code>目录下的<code>css</code>和<code>js</code>文件．如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; List, Button, Flex &#125; from &apos;antd-mobile/dist/antd-mobile&apos;;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><code>antd</code>没有响应式设计，在移动端要使用<code>antd-mobile</code></li><li><code>antd-mobile</code>目前还不如<code>antd</code>成熟</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;我们的项目使用的技术栈是&lt;code&gt;Meteor&lt;/code&gt;和&lt;code&gt;React全家桶&lt;/code&gt;，前端UI库用的是&lt;code&gt;Bootstrap&lt;/code&gt;．最近经人介绍了解到阿里蚂蚁金服前端团队出品的&lt;code&gt;antd&lt;/code&gt;和&lt;code&gt;antd-mobile&lt;/code&gt;，
    
    </summary>
    
      <category term="Tech" scheme="http://wuyang910217.github.io/categories/Tech/"/>
    
    
      <category term="meteor" scheme="http://wuyang910217.github.io/tags/meteor/"/>
    
      <category term="antd" scheme="http://wuyang910217.github.io/tags/antd/"/>
    
  </entry>
  
  <entry>
    <title>哲学家都干了些什么</title>
    <link href="http://wuyang910217.github.io/2016/11/24/what-have-done-by-philosopher.html"/>
    <id>http://wuyang910217.github.io/2016/11/24/what-have-done-by-philosopher.html</id>
    <published>2016-11-24T00:47:12.000Z</published>
    <updated>2019-01-06T02:29:18.183Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>《哲学家都干了些什么》作者林新浩，讲述史上最严谨又最不严肃的哲学史．<a id="more"></a></p><p>在被告人是否有罪这个问题上,陪审团是负责裁决的主角。法官才是陪衬,只能做做解释法律、引导庭<br>审、剔除非法证据、维持法庭秩序之类的“服务”工作。</p><p>让我们难以理解的是,美国陪审团的成员都是普通老百姓。法庭对他们的学历水平、法律知识几乎没有<br>任何要求。一个小学学历、没学过法律的人,也有权决定嫌疑人是不是有罪。</p><p>但在美国人看来,这种制度有个很大的好处,就是能保证每个案件的裁断都符合大众的道德观。这能避<br>免法律人士凭着专业优势玩弄法律条文,避免由于法官个人好恶左右案情,也能用来对抗失去民心的恶<br>法。</p><p>不难理解,理论上陪审团成员越多,断案就越客观。出于成本考虑,今天美国的陪审团只有12个人。</p><p>苏格拉底的案件常常被现代人当作“民主暴政”的例子,说明“多数人的民主”在错误的引导下也会作<br>出邪恶的判决。</p><p>但是芝诺有一个著名的比喻,说人的知识好像一个圆圈,知识越多,圆圈的周长就越长,就会发现自己<br>越无知。</p><p>我们普通人为什么要研究哲学?我在本书前言里说了,这关系到我们个人的哲学问题是:人生的意义是<br>什么?</p><p>奢侈是什么?贵而无用就叫奢侈。而哲学这玩意儿超级无用。所以那个时代的人们一听说你是学哲学<br>的,都狂羡慕。人家想:这人家里得多富裕才敢往哲学身上糟践钱啊。</p><p>哲学的发展非但不是一马平川,反而在好几个世纪里都处于命悬一线的危险境地。一不留神,哲学前辈<br>们的努力就会从地球上彻底绝迹。</p><p>这底比斯圣队非常有名,最大的特点是所有士兵都是一对一对的同性恋。这支部队都是恋人兵,打仗的<br>时候谁都不肯后退,战斗力超强。当这支部队被马其顿王子击溃后,整个雅典联军也就溃败了。雅典从<br>此落入了马其顿人之手。</p><p>二十年后,亚历山大的军队所向披靡,最终让马其顿横跨欧亚非三洲,成为人类古代史上面积最大的帝<br>国之一,称为亚历山大帝国。</p><p>王国维说:“可爱者不可信,可信者不可爱。”</p><p>是的,和苏格拉底、柏拉图齐名的亚里士多德不是雅典人,是马其顿人。</p><p>亚历山大的征服对哲学来说是一件好事。 随着亚历山大的铁骑,希腊的哲学著作得以遍布东欧、北非以<br>及中亚,散布下无数思辨的火种。如果没有这一步铺垫,不久以后,希腊哲学就会彻底从地球上消失。</p><p>当然,我们知道,罗马宽容政策的后果直接导致了后来的欧洲再也没能形成像中国那样统一的大国,而<br>是永远分成了多个民族国家。 对于欧洲的历史选择,有人说好,有人说不好,这些我们不讨论。 我只知<br>道对于知识来说,宽容永远代表着光明。</p><p>罗马帝国成立之初的文化界,宛如咱们春秋时代的百家争鸣。争鸣的地方常常是在城市中心的广场上。<br>不同学派的人们可以自由宣讲、辩论自己的观点,那是文化人最幸福的时代。</p><p>罗马帝国在文化和宗教上奉行的是宽容政策。 比如罗马征服了很多蛮族,那些蛮族原本有自己的神灵。<br>为此,罗马人建了极其宏伟的“万神殿”,把各个蛮族的神灵都供奉到里面。</p><blockquote><p>犹太教和基督教并不是同一个宗教。首先是在犹太人中产生了犹太教,而基督教是从犹太教中发展来<br>的。</p></blockquote><p>在对待经文上,两者都信奉《旧约》,但只有基督教相信《新约》。《旧约》和《新约》的区别大致在<br>于,一个是记录耶稣降生之前的事,一个是记录之后的事。</p><p>保罗做的最重要的一件事,就是向犹太人以外的民族传播基督教。这是一项很了不起的工作。在保罗之<br>前,基督教大体上只限于犹太人自己信仰。因了保罗的传教,才使得基督教后来成为世界性的大宗教。</p><p>历史上有一个规律,在斗争中,哲学总站在弱者的一方。</p><p>保罗有深厚的哲学功底,他将哲学的思维方式应用到传教中,撰写了大量的神学文章。这些文字后来被<br>称作《保罗书信》,成为《新约》的重要组成部分。</p><p>好的地方在于,这回是显了哲学的大能耐了。基督教对世界影响深远,起步阶段的汗马功劳就是哲学立<br>下的。</p><p>不好的地方在于,宗教和哲学在根子上是无法协调的。宗教要求信仰,哲学要求怀疑,两者相悖。</p><blockquote><p>王尔德说过:“我能抵抗一切,除了诱惑。”</p></blockquote><p>奥古斯丁的贡献之一,就是解决了一个长久困扰基督教的逻辑漏洞: 《圣经》说上帝是全知、全能和全<br>善的,那为什么会允许人间存在这么多丑恶和痛苦?</p><p>更具体地说,上帝是善的,而上帝的善表现在上帝对人类的行为要进行公正的赏罚。既然要赏罚,前提<br>是人类必须拥有自由意志,必须有能力自己选择行善还是作恶,否则人类就不应该对自己的行为负责。</p><p>有个教父哲学家有一句名言:“上帝之子死了,虽然是不合理的,但却是可以相信的。埋葬以后又复活<br>了,虽然是不可能的,但却是肯定的。正因为荒谬,所以我才相信。”</p><p>有句俗话叫“能用钱解决的问题都不是问题”,其实还可以说一句话:“必须用暴力解决的问题都是解<br>决不了的问题”。</p><p>换句话说,垄断了对权威的解释,就等于垄断了一切。</p><blockquote><p>也正因为有了印刷术,欧洲人才有了众多崭新的思想,有了哲学的复兴,有了科学的崛起,有了现代文<br>明的一切:思想自由、理性、怀疑精神、科学、光明的未来。</p></blockquote><p>威尔・杜兰的话说:“每一次收获乃是大地的奇迹与苍穹之杰作”。</p><blockquote><p>欧洲基督教分成了两大派:罗马一方被称为天主教;路德一方被称为新教。另外,东边的罗马帝国在此<br>之前还搞了一个东正教。</p></blockquote><p>俗话说“牛打江山马坐殿”。革命的理论者和掌权者常常不是同一个人。就像卢梭成就了罗伯斯庇尔,<br>路德成就的是加尔文。</p><p>加尔文像他的敌人——罗马的天主教皇那样——当上了新教的教皇,日内瓦成了新教的罗马。</p><p>当邻居大妈默念“人的命天注定”的时候,她信奉的是宿命论和决定论;当朋友在酒桌上劝你“赚钱有<br>什么用,钱再多早晚也是一个死”的时候,他讲的是虚无主义;当人生感悟型的散文告诫你“当下最重<br>要,活出你自己”的时候,它其实就是萨特的代言人。</p><blockquote><p>为什么当年的苏格拉底那么招人讨厌,却能被后人奉为圣贤。因为他的怀疑是理性文明的开端和标尺。<br>所有的思想都要因他的怀疑而诞生,最后还要能经得住他的怀疑才算合格。</p></blockquote><p>荷兰在近代欧洲第一个取消了独裁者,完全采用议会投票的方式处理政务。这种政体从罗马屋大维结束<br>民主制度以来,已经很多年没有了。此时的荷兰也不能叫作“荷兰王国”了,而改叫“荷兰共和国”。</p><p>“我思”和“我在”不是因果关系,而是推理演绎的关系。即:从前者为真可以推导出后者为真。也就是<br>从“我思”为真,可以推导出“我在”为真。而不是说“我不思”的时候就“我不在”了,在不在我们<br>不知道。</p><blockquote><p>安德罗尼柯起这个metaphysics的原本目的,应该是他没有现成的词汇可用,于是就说这部分著作是“编<br>排在《物理学》之后的内容”。但这个词的含义也可以引申成“物理学之后的学问”。也就是说,形而<br>上学研究的是那些高于物理学的、看不见、摸不着的学问。 这就是“形而上学”这个词最早的来历。<br>“形而上学”的中文译名也很棒,称得上是中文翻译史上最棒的译名之一。</p></blockquote><p>中文典出《易经》:“形而上者谓之道,形而下者谓之器。”</p><p>我们现在所说的“形而上学”,可以简单地理解成是用理性思维去研究那些能统一世间一切问题的“大<br>道理”</p><p>二元论能帮助我们的关键是:我们在自己的精神世界里是无敌的,而一切体验归根到底都是精神体验。</p><p>笛卡尔说过:“不管多么荒谬、多么不可置信的事,无一不是这个或那个哲学家主张过的。”</p><p>按照笛卡尔的设计,斯宾诺莎把哲学研究推上了一条井然有序的道路。其他的哲学家可以像做数学研究<br>那样,发明新的体系,创造新的定理。或者按照逻辑规则修改、补充前人的成果。如此,哲学成果也就<br>必然会越来越完善,越来越接近真理。</p><p>培根强调要重视事实。而在事实的基础上进一步形成科学知识,就要靠归纳法了。</p><blockquote><p>事实上,我们今天取得的所有科学成就,都是综合使用归纳法和演绎推理的结果。</p></blockquote><p>对于科学家们来说,数学是通向真理的桥梁,但不是真理本身。</p><p>洛克也承认人的本能是天生的,比如直觉之类。但洛克认为,这些本能就和动物捕食、生存的本能一<br>样,是一种生理、心理上的习惯而已,并不是什么比客观世界高一等的理性,更不可能由此建立起一个<br>哲学世界来。</p><p>顺便一说,洛克在政治上的贡献也很大。他是一个自由主义者,在皇权当道的时代就提出了“人人生而<br>平等”“天赋人权”等概念。他的理论影响深远,美国的《独立宣言》甚至直接引用了洛克的著作中的<br>话。</p><blockquote><p>笛卡尔、斯宾诺莎代表的数学家派,被称为“理性主义”。 在归纳法里,最重要的是实验数据,是观测<br>结果,它们是科学理论的基础和证据。这些东西可以用一个词来统称:经验。 所以洛克代表的科学家派<br>被称为“经验主义”。</p></blockquote><p>假如哲学是一座通向终极真理的巴别塔的话,那么理性主义者的塔高耸入云,每搭建一次,都似乎马上<br>可以触摸到天堂。但是这座塔的根基却是几根破木头,经验主义者们经常溜达过来,随便踹上几脚,这<br>座塔就塌了。 经验主义不同,他们的塔盖得极为结实。但是由于能力有限,他们只能零零散散地在各地<br>建造一些矮塔,这些塔既连不到一块,又没法盖得很高。因此经验主义者们的塔虽然结实,却根本没法<br>满足人类的要求,盖得再多也没有用。</p><p>如果不怕被指责牵强的话,我们还可以说,重视个别经验、对独断论充满警惕之心的经验主义,是英国<br>人古板的民族性格的体现。而试图从万物根本一劳永逸地建立一个大一统理论的理性主义,正是荷兰和<br>法国浪漫精神的代表。</p><p>莱布尼茨在给他的贵族小姐们解释这件事的时候,说了一句名言:“世上没有两片树叶是相同的。”</p><p>没有他,以英国小小的面积,要想对抗整个欧洲大陆恐怕是痴人说梦。而有了他,英国学者一下子就成<br>为全世界最权威、最有话语权的人。 这个威震天下的神仙就是牛顿。</p><p>牛顿,旷世天才,伟大的物理学家、数学家、天文学家、哲学家、神学家、炼金术士、小心眼儿、世界<br>末日预测者。 ——对,你没听错,牛顿晚年通过复杂的公式,计算出了世界末日的具体时间,就在2060<br>年。</p><p>牛顿的学霸行为还造成了另一个后果。莱布尼茨的微积分符号比牛顿的更简单易用,当时整个欧洲都采<br>用了莱布尼茨的符号,包括我们今天用的也是莱布尼茨的。但英国出于民族主义,坚持使用牛顿符号,<br>使得英国和欧洲大陆之间的科学交流受到了严重的阻碍。一百多年后,英国实在绷不住了,才放弃了难<br>用的牛顿符号,改用莱布尼茨的。这一百多年的死要面子给英国学术的发展造成了巨大的损失。</p><p>但是这简单的三句话,却可以解释小到一块石子、大到一颗星球,乃至宇宙中一切一切物体的运动规<br>律。而且以当时的观测条件,预测的结果很精确。就算是向来被人们当作神祇的群星,牛顿说它们下一<br>步该出现在哪里,它们就出现在哪里。</p><blockquote><p>1727年牛顿逝世后,被安葬在英国最高级别、埋葬众多英国国王的威斯敏斯特大教堂里。英国给他举行<br>的是国葬,送葬队伍绵延好几英里,为他抬棺材的是两位公爵、三位伯爵和一位大法官。</p></blockquote><p>用物理学来解释包括人类意识在内的整个世界,这种观点就叫作“机械论”。</p><p>机械论很好理解,我们在学校的时候都受过辩证唯物主义的训练。机械论就是除掉了辩证法之后的唯物<br>主义,也可以叫作“机械唯物主义”。</p><p>到了这时,人类理解、设计社会也可以像用力学去计算天体一样简单便捷。人类可以按照这些公式,设<br>计出一个完美的社会。我们可以自信满满地保证每一个社会政策都是对人类利益的最优解,就像我们可<br>以保证每一台新发明的机械都是对力学的最优解一样。那样可以避免多少人间悲剧啊。</p><p>既然一切都是决定好的,那我们为什么还要努力奋斗,为什么还要劳动?人生还有什么意义?如果人类<br>只是被操控的木偶,活着听从因果律摆布,死后化为虚无。那还有什么人生意义呢?</p><p>所以,你觉得自己是自由的,这感觉本身也是被因果律决定好的。连你试图反抗因果律这行为本身,也<br>是被因果律决定的。</p><p>决定论虽然会导致一些很荒谬的结果,导致人对待生活的消极态度。但决定论也能起到很强的安慰作<br>用。唯我论把人看得最大,可以安慰人。机械论和决定论把人看得渺小,也同样可以安慰人。</p><p>从逻辑上还可以这么解释。两件事连在一起发生,发生了一回,经验只能告诉我们这是偶然的。那么无<br>论这两件事连在一起发生了多少遍,它还是偶然发生的。因为再多次的偶然累计在一起也不可能把偶然<br>变成必然。</p><p>实际上,我们生活中常常遇到类似不靠谱的结论。比如因为“少年犯中80%的人都玩网络游戏”,就得<br>出结论,说“玩网络游戏会导致青少年犯罪”。那“100%的少年犯每天都吃饭”该怎么解释?</p><p>休谟有一句名言,说你怎么知道明天的太阳会照样升起。对休谟不屑一顾的人,把这句话当作休谟白日<br>做梦的笑话。而对于被休谟说服了的人,这句话代表的是休谟结论的可怕结果。</p><p>包括康德,以及后面的谢林、黑格尔、费尔巴哈、叔本华、尼采、马克思、胡塞尔、海德格尔,还有对<br>哲学影响颇大的爱因斯坦、海森堡。这个超豪华阵容全部都是德意志人。他们中有不少是犹太人。</p><p>康德却是个另类。在他漫长的一生中,只短暂离开过家乡的小镇一两次,最远只到过100公里外的地方。<br>他几乎一辈子都蜗居在自己家里,而且终身未婚。其实康德有两次求婚的机会,但全都因为他的优柔寡<br>断,结果错失良机——完全就是宅男的典范呀!</p><p>话说康德看了休谟的论述之后,很震撼。他觉得休谟说得没错,理性主义属于独断论,经验主义又不能<br>证明事物之间存在因果关系。康德为此想了很久,突然,一个大胆到狂妄的念头产生了。</p><blockquote><p>这个比喻说,假设每个人终身都必须戴着一副蓝色的有色眼镜。这个世界上所有的事物,必须都通过有<br>色眼镜的过滤才能被人看到。那么所有人看到的就是一个蓝色的世界,而世界真实的面貌是人永远看不<br>到的。 在这个比喻里,有色眼镜是先天认识形式,事物原本的颜色是物自体,人类看到的蓝色的世界,<br>是表象。</p></blockquote><p>康德的解决方法是,他把世界分成了两个部分。一个部分完全不可知,另一个部分则可以用理性把握。<br>不可知的那部分因为永远不可知,所以对我们的生活没有什么影响。只要我们在可把握的世界里生活,<br>理性就又恢复了威力。</p><blockquote><p>就像康德的名言:“有两种东西,我对它们的思考越是深沉和持久,它们在我心灵中唤起的惊奇和敬畏<br>就会日新月异,不断增长。这就是我头上的星空和心中的道德定律。”</p></blockquote><p>康德的作息时间严格得出了名,但据说有一件事曾经让他主动打乱了自己的作息时间表:读卢梭的《爱<br>弥儿》。他屋里挂着的唯一一幅画就是卢梭的画像。康德非常喜欢卢梭,而且还关注了在卢梭的影响下<br>那个彻底改变世界历史的大事件:法国大革命。</p><p>我们今天对辩证法有一种庸俗的理解,说辩证法就是“看待事物要分两个方面”。别人批评一个现象,<br>你非要说“要辩证地看这件事,这件事也有好的一面嘛”。这是对辩证法的极大误读。这不叫辩证法,<br>这叫诡辩法,它的唯一作用是把所有的事实都捣成一片糨糊,逃避一切有意义的结论。</p><p>他认为,世界不是容不得矛盾的,而恰恰相反,到处都是矛盾,矛盾就是世界的本质。</p><blockquote><p>黑格尔认为,矛盾的双方可以共存,但是处在互为差异、甚至互相冲突的动态之中。事物的正题和反题<br>会发生强烈的冲突,这个冲突的结果并不是一方消灭另一方,而是正题和反题最终化为“合题”达到了<br>协调,升华了。 前面说过,有一个正题就可以找到它的反题,因此新的合题产生之后,它的反题也随之<br>产生,这样就又产生了新的矛盾,又要有新的冲突和升华,再产生新的合题</p></blockquote><p>因此黑格尔认为,事物是不断变化的,这种变化是自发的、抑制不住的。 同时,这种变化不是无序的,<br>而是有方向的,这个方向就是较低级的正题和反题不断变成更高级的合题,也就是事物不断在向高级形<br>态变化。</p><p>换句话说,理性经过不断的辩证,就可以完全符合客观世界的真实面貌。理性就是世界的本质,世界的<br>本质就是理性。 所以说,宇宙的本质是精神,而且是一种理性精神。 这个理性精神,就是黑格尔的“绝<br>对精神”。</p><p>因为重视历史过程,黑格尔是第一个重视研究哲学史的人。今天人们学西方哲学的时候,公认最好的办<br>法是先读一本《西方哲学史》才有资格再谈别的,这个风气就是从黑格尔开始的。</p><p>因此,黑格尔说:“凡是合乎理性的东西都是现实的,凡是现实的东西都是合乎理性的。”按照我的理<br>解,这里的“理性”指的是绝对精神。“现实”指的是符合历史必然性的事物。这句话的意思是,所有<br>合乎绝对精神的事物,必然会发生。</p><p>我们知道,黑格尔的历史观后来被马克思批判性地继承,变成了辩证唯物主义历史观——马克思也认<br>为,历史的进程是有方向的,不可逆转、不可阻止的,但是可以预测的。</p><blockquote><p>黑格尔是形而上学的巅峰,他创造了一个史上最完备、最庞大的形而上学世界。黑格尔在生前就获得了<br>巨大的声望。在他50岁的时候,黑格尔正在柏林大学当教授。不久以后,他将会出任柏林大学的校长,<br>他的学说将被钦定为国家的官方学说。</p><p>生命意志的概念比一般的生物欲望还要宽泛,还包括没有生命的事物在内。叔本华认为,宇宙中万事万<br>物背后都有生命意志在驱动。小到磁石相吸,大到星球运行,背后的本质原因都是生命意志。</p><p>意志是个充满欲望的君王,但是它头脑糊涂,只知道发布命令,不知道该怎么去更好地达到目的。理性<br>是个头脑清醒的老臣,它虽然对君王的命令有意见,但是限于身份,只能偶尔劝谏君王,大部分时候都<br>是在用它的聪明才智去满足君王的欲望。 理性不是没有用,只是实现意志的工具而已。</p></blockquote><p>而叔本华说,生命意志是邪恶的,是痛苦的源泉。所以每个人都逃脱不了痛苦。 叔本华为什么这么说<br>呢? 满足欲望会带来快乐,这没错。但是叔本华认为,欲望本质上是痛苦之源。 因为满足不了欲望,人<br>会痛苦。满足了欲望,人又会产生新的、更高的欲望,还是会痛苦。 叔本华打比方说,满足欲望,就好<br>比施舍给乞丐一个硬币,维持他活过今天,以便把他的痛苦延续到明天。叔本华还引用一句法国谚语,<br>说明人们无止境的欲望:“更好是好的敌人。”</p><p>所以快乐只是暂时的,痛苦才是永恒的。人生就好像在痛苦和无聊之间不停摆动的钟摆。</p><blockquote><p>这种情景就像王尔德说的:“人生有两大悲剧:一个是得不到想要的东西,另一个是得到了。”</p></blockquote><p>欲望除了能给人类带来无尽的痛苦,还有一个坏处,会带来自私和竞争。生命意志就是不顾一切也要自<br>身生存着的意志。在生命意志的驱使下,每一个生物都为了自己的利益去争去抢。人和人之间会因此互<br>相伤害。物种间也是这样,比如一个物种吃另一个物种。</p><p>首先,叔本华的悲观主义从某些角度上看确实是成立的。虽然说理性未必就会败给欲望,但对于大部分<br>人来说,欲望的确是生活的主题。我们是为了获得尽可能多的安全感,为了有更好的物质享乐,为了和<br>别人攀比,才会去忍受无穷无尽的艰辛劳动和在各种挫折中的垂头丧气。大部分人这一辈子活着,为的<br>都是满足各种各样的欲望。我们也同意,欲望是永远不会被满足的。满足了就会产生新的欲望,不满足<br>就会产生饥渴感。</p><p>对于哲学史来说,叔本华最大的价值不在于悲观主义的世界观,而在于他暗示了一个巨大的危机。 理性<br>没落的危机。</p><p>所以,人类固然有艺术这类非理性的成就,但是没有了理性,人类就不能积累知识,不能劳动生产,不<br>会谋生,甚至于连自己是谁都不知道了,如同行尸走肉。</p><blockquote><p>叔本华,一般人以为他是一个悲天悯人的慈祥老头。不!生活中他暴躁刻薄。 尼采,一般人以为他是一<br>个放荡不羁的狂人——不,生活中他是一个温和的智者。</p></blockquote><p>尼采继承了叔本华的形而上学。叔本华说物自体是“生命意志”,尼采给改造成了“权力意志”。 “权<br>力意志”一词中的“权力”容易引起误解。这并不是政治权力的意思,而是指要让自己变得更强大、更<br>强壮、更富创造力的欲望。</p><p>他谈的第一种道德是属于弱者的道德,尼采叫它奴隶道德(又叫“畜群道德”)。 表面的内容是同情、<br>仁慈、谦卑、平等。其实本质上,是弱者为了掩盖自己对强者的恐惧、嫉妒和自私,借助奴隶道德去限<br>制强者。</p><p>实际上我们细想,这个所谓的“奴隶道德”,不就是我们人类社会的传统道德吗?所以尼采说:“迄今<br>为止用来使人变得道德的一切手段都是不道德的。”</p><p>尼采说的第二种道德是强者的道德,它可以叫作贵族道德。这种道德鼓励人们积极进取,特立独行,崇<br>尚强大,鄙视软弱,追求创新,拒绝平庸,它代表了生命积极的一面。尼采认为,奴隶道德和贵族道德<br>最明显的区别在于:奴隶道德总是在禁止,不许人们做这做那;贵族道德则是在鼓励人们自由创造。</p><blockquote><p>这是因为,权力意志是物自体,是一切事物的本质,自然也是弱者的本质。因此弱者本性也像强者那<br>样,希望能彰显自己的意志,驾驭弱者。但是弱者他自己弱啊,没能力啊,因此弱者只能躲在“奴隶道<br>德”下,掩盖自己残忍的本质。弱者是虚伪的,而强者的残忍是彰显自己的本性,是正当的。</p></blockquote><p>“超人”这个词在尼采的理论里不是指拥有强大权力的人,不是说这人一定要当总统、当将军,而是指能<br>够完全按照自己的意志行动、能充分发挥自己的创造力,并且能摆脱奴隶道德、不被弱者束缚的强者。<br>超人是尼采对人类的一种理想,在尼采眼里,整个人类历史里也很少有人能成为真正的超人。</p><p>进化论把这神秘性给打破了。进化论就像牛顿力学那样,用极为简单的理论解释了复杂的世界,而且逻<br>辑严谨,能自圆其说,不需要任何超自然力量的干涉,比牛顿力学更容易让人接受。</p><p>这幅圆形图的意思是说,不管生物的构造是否复杂,大家都是演化的幸存者。</p><p>简单地说,社会达尔文主义的意思是,我们的社会也应该像优胜劣汰的大自然那样,有很高的淘汰率,<br>把不适合生存的人都淘汰掉,以便达到最高效的进化。其中最具代表性的就是纳粹的种族主义。纳粹认<br>为只有“优等”种族才有权利在资源有限的地球上生存下去,其他的“劣等”种族必须淘汰掉,以免和<br>优等种族抢夺资源,以免他们以通婚方式“污染”优等种族的基因。这种社会达尔文主义给纳粹迫害犹<br>太人找到了理论借口。</p><p>在古代,人类以为地球是宇宙的中心,日心说打破了这个美梦,告诉我们人类不过是生活在广大银河系<br>一隅中、微不足道的星系里、一个微不足道的小星球上的一种生物,没有任何特殊的地位。</p><p>人类原本还以为自己是万物之首,和其他动物相比有着截然不同的高贵地位,所以在基督教里,只有人类才有灵<br>魂。 然而进化论把这种自满也给消灭了。人类只不过是为了生存、在进化论规律下随机突变出的一种生<br>物而已。在进化的过程中,人类也没有什么高贵性、神圣性。</p><p>就不说他3岁指出父亲账本的错误,不说他22岁获得博士学位,也不说他25岁当选院士,更不说他精通六<br>七种语言。 只说他19岁的时候就想出了正十七边形的尺规画法。在他之前的所有大数学家,包括牛顿在<br>内,都没能想出这方法来。当然,我知道,您大概跟我一样,对这什么什么边形没什么概念。正好网上<br>可以搜到画这个正十七边形的动画,您自个儿看一下就能感受到了。我的意思是,别说19岁了,就算你<br>我学到29岁,这画法咱都未必能学会。 这个人您大概猜出来了,他叫高斯,法国人,人送外号数学小王<br>子</p><p>广义相对论的意思是说,当空间中存在物质和能量的时候,空间就会受到影响而弯曲,质能越大,空间<br>弯曲得越厉害。引力就是这种空间弯曲产生的。</p><p>罗素高寿,活了98岁。他出生的时候是中国同治十一年,颐和园还没开始建造。他去世的时候是1970<br>年,互联网已经诞生了。</p><blockquote><p>他的名言是:“三种单纯又极其强烈的激情支配着我的一生:对爱情的渴望,对知识的追求,以及对于<br>人类苦难不可遏制的同情。”这话广为流传。</p></blockquote><p>一个是,毛姆小说《刀锋》主角的原型就是维特根斯坦,两者在经历上有很多呼应的地方。</p><p>具体来说:科学理论必须能提出一个可供证伪的事实,假如这个事实一经验证,便承认该理论是错的。</p><blockquote><p>换句话说,所有的科学理论都是一种假说,科学家没有办法证实任何一种科学理论。但是科学理论可以<br>给别人提供验错的机会。在没被检验出错误之前,我们就姑且相信这个科学理论是正确的。</p></blockquote><p>证伪主义的科学观是,人类提出的各种科学理论有点像是基因突变,科学家们发散思维,想出各种充满<br>想象力的假说。证伪就如同自然环境对基因的筛选,经不住证伪的假说都被淘汰,留下的都是经得住检验的,也就是暂时正确的科学理论。 那些留下来的理论,科学家们也在不断地尝试证伪,一旦证明是错<br>的,就进行修改。这样科学理论就会越来越完善。这个试错、修改、完善的过程是无休止的,科学也因<br>此会越来越接近真理。</p><p>概率主义认为,我们每一次检验科学理论正确,都是在为科学作贡献。证伪主义认为,检验正确并不为<br>科学作贡献,只有检验出科学理论是错的,才是真正为科学作贡献。</p><blockquote><p>证伪主义的政治观,最关心的不是谁制定的政策,而是无论谁制定的政策,都不能成为绝对真理。不管<br>是美国总统下的命令还是全世界人民投票的结果,都要给别人留出修改、推翻它的机会。</p><p>可以随时“纠错”而不是“多数说了算”,这才是现代民主制度的核心精神。</p><p>科学就是建立在经验主义基础上的、以实用主义为原则筛选出来的、可以被证伪的理论。</p></blockquote><p>实际上,所有的形而上学都会陷入无法证明自身的困境。</p><p>加缪说过:“真正严肃的哲学问题只有一个,那就是自杀。”</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;《哲学家都干了些什么》作者林新浩，讲述史上最严谨又最不严肃的哲学史．
    
    </summary>
    
      <category term="读书" scheme="http://wuyang910217.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="笔记" scheme="http://wuyang910217.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="文学" scheme="http://wuyang910217.github.io/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>the alchemist摘录</title>
    <link href="http://wuyang910217.github.io/2016/11/13/the-alchemist.html"/>
    <id>http://wuyang910217.github.io/2016/11/13/the-alchemist.html</id>
    <published>2016-11-13T13:34:47.000Z</published>
    <updated>2019-01-06T02:29:18.181Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><em>The Alchemist</em>　中文译名《牧羊少年奇幻之旅》，作者保罗·科尔贺（Paulo Coelho），<a href="https://zh.wikipedia.org/wiki/%E7%82%BC%E9%87%91%E6%9C%AF%E5%A3%AB_(%E5%B0%8F%E8%AF%B4" target="_blank" rel="noopener">wiki介绍</a><br><a id="more"></a></p><h3 id="Foreword前言"><a href="#Foreword前言" class="headerlink" title="Foreword前言"></a>Foreword前言</h3><blockquote><p>When I sat down to write <em>The Alchemist</em>, all I knew is that I wanted to write about my soul. I wanted to write about my quest to find my treasure. I wanted to follow the omens, because I knew even then that the omens are the language of God.</p></blockquote><h3 id="Prologue开场白"><a href="#Prologue开场白" class="headerlink" title="Prologue开场白"></a>Prologue开场白</h3><p>The alchemist picked up a book that someone in the caravan(商队) had brought. Leafing through(翻阅) the pages, he found a story about Narcissus(水仙花).</p><p>The alchemist knew the legend of Narcissus, a youth who knelt daily beside a lake to contemplate(注视，沉思) his own beauty. He was so fascinated by himself that, one morning, he fell into the lake and drowned(溺死). At the spot where he fell, a flower was born, which was called the narcissus.</p><p>But this was not how the author of the book ended the story.</p><p>He said that when Narcissus died, the goddesses of the forest appeared and found the lake, which had been fresh water, transformed into a lake of salty tears.</p><p>“Why do you weep?” the goddesses asked.</p><p>“I weep for Narcissus,” the lake replied.</p><p>“Ah, it is no surprise that you weep for Narcissus,” they said, “for though we always pursued him in the forest, you alone could contemplate his beauty close at hand.”</p><p>“But…was Narcissus beautiful?” the lake asked.</p><p>“Who better than you to know that?” the goddesses said in wonder. “After all, it was by your banks that he knelt each day to contemplate himself!”</p><p>The lake was silent for some time. Finally, is said:</p><blockquote><p>“I weep for Narcissus, but I never noticed that Narcissus was beautiful. I weep because, each time he knelt beside my banks, I could see, in the depths of his eyes, my own beauty reflected.”</p></blockquote><p>“What a lovely story,” the alchemist thought.</p><h3 id="Part-one"><a href="#Part-one" class="headerlink" title="Part one"></a>Part one</h3><p>DUSK was falling as the boy arrived with his herd(牲畜) at an abandoned church. The roof had fallen in long ago, and and enormous sycamore(圣经中的桑树) had grown on the spot where the sacristy(圣器室) had once stood.</p><p>Thinking about that for a moment, the realized that it could be the other way around: that it was he who had become accustomed to their schedule.</p><p>But ever since he had been a child, he had wanted to know the world, and this was much more important to him than knowing God and learning about man’s sins.</p><blockquote><p>The boy could see in his father’s gaze a desire to be able, himself, to travel The world–a desire that was still alive, despite his father’s having had to bury it, over dozens of years, under the burden of struggling for water to drink, foot to eat, and the same place to sleep every night of his life.</p><p>It’s the possibility of having a dream come true that makes life interesting.</p></blockquote><p>And dreams are the language of God. When he speaks in our language, I can interpret what he has said. But if he speaks in the language of the soul, it is only you who can understand.</p><p>A shepherd always takes his chances with wolves and with drought, and that’s what makes a shepherd’s life exciting.</p><p>I only interpret dreams. I don’t know how to turn them into reality. That’s why I have to live off what my daughters provide me with.</p><p>Everyone seems to have a clear idea of how other people should lead their lives, but none about his or her own.</p><p>“What’s the world’s greatest lie?” the boy asked, completely surprised.</p><blockquote><p>It’s this: that at a certain point in our lives, we lose control of what’s happening to us, and our lives become controlled by fate. That’s the world’s greatest lie.</p></blockquote><p>Sometimes it’s better to be with the sheep, who don’t say anything. And better still to be alone with one’s books. They tell their incredible stories at the time when you want to hear them.</p><p>Personal Legend(天命)</p><p>At that point in their lives, everything is clear and everything is possible. They are not afraid to dream, and to yearn for everything they would like to see happen to them in their lives. But, as time passes, a mysterious force begins to convince them that it will be impossible for them to realize their Personal Legend.</p><p>It’s a force that appears to be negative, but actually shows you how to realize your Personal Legend. It prepares your spirit and your will, because there is one great truth on this planet: whoever you are, or whatever it is that you do, when you really want something, it’s because that desire originated in the soul of the universe. It’s your mission on earth.</p><blockquote><p>When you want something, all the universe conspires in helping you to achieve it.</p></blockquote><p>If you start out by promising what you don’t even have yet, you’ll lose your desire to work toward getting it.</p><p>Here I am, between my flock and my treasure, the boy thought. He had to choose between something he had become accustomed to and something he wanted to have.</p><p>Because there is a force that wants you to realize your Personal Legend; it whets your appetite with a taste of success.</p><p>In order to find the treasure, you will have to follow the omens. God has prepared a path for everyone to follow. You just have to read the omens that he left for you.</p><p>The secret of happiness is to see all the marvels of the world, and never to forget the drops of oil on the spoon.</p><blockquote><p>I’m like everyone else － I see the world in terms of what I would like to see happen, not what actually does.</p></blockquote><p>If I can learn to understand this language without words, I can learn to understand the world.</p><h3 id="Part-Two"><a href="#Part-Two" class="headerlink" title="Part Two"></a>Part Two</h3><p>You and I aren’t like Hassan, that rich merchant. If he makes a buying mistake, it doesn’t affect him much. But we two have to live with our mistakes.</p><p>We have to take advantage when luck is on our side, and do as much to help it as it’s doing to help us. It’s called the principle of favor-ability. Or beginner’s lucky.</p><p>We are obliged, at least once in our lives, to visit the holy city of Mecca.</p><p>Because it’s the thought of Mecca that keeps me alive. That’s what helps me face these days that are all the same, these mute crystals on the shelves, and lunch and dinner at that same horrible cafe. I’m afraid that if my dream is realized, I’ll have no reason to go on living.</p><p>I have been told that beauty is the great seducer(诱惑者) of men.</p><p>every blessing ignored becomes a curse. I don’t want anything else in life. But you are forcing me to look at wealth and at horizons I have never known.</p><p>That there was a language in the world that everyone understood, a language the boy had used throughout the time that he was trying to improve things at the shop. It was the language of enthusiasm, of things accomplished with love and purpose, and as part of a search for something believed in and desired.</p><blockquote><p>When you want something, all the universe conspires to help you achieve it.</p></blockquote><p>He had worked for an entire year to make a dream come true, and that dream, minute by minute, was becoming less important. Maybe because that wasn’t really his dream.</p><p>The Englishman was sitting on a bench(长凳) in a structure that smelled of animals, sweat, and dust; it was part warehouse(仓库), part corral(畜栏).</p><p>Making a decision was only the beginning of things. When someone makes a decision, he is really diving into a strong current that will carry him to places he had never dreamed of when he first made the decision.</p><p>the mysterious chain that links one thing to another, the same chain that had caused him to become a shepherd, that had caused him recurring dream, that had brought him to a city near Africa, to find a king, and to be robbed in order to meet a crystal merchant, and …</p><blockquote><p>Although the boy had developed a superstition that each time he opened the book he would learn something important, he decided it was an unnecessary burden.</p></blockquote><p>People need not fear the unknown if they are capable of achieving what they need and want.</p><p>We are afraid of losing what we have, whether it’s our life or our possessions and property. But this fear evaporates when we understand that our life stories and the history of the world were written by the same hand.</p><p>When you want something with all your heart, that’s when you are closest to the Soul of the World. It’s always a positive force.</p><p>Because I don’t live in either my past or my future. I’m interested only in the present. If you can concentrate always on the present, you’ll be a happy man. You’ll see that there is life in the desert, that there are stars in the heavens, and that tribesmen fight because they are part of the human race. Life will be a party for you, a grand festival, because life is the moment we’re living right now.</p><p>The closer he got to the realization of his dream, the more difficult things became. It seemed as if what the old king had called “beginner’s luck” were no longer functioning. In his pursuit of the dream, he was being constantly subjected to tests of his persistence and courage. So he could not be hasty, nor impatient. If he pushed forward impulsively, he would fail to see the signs and omens left by God along his path.</p><p>At that moment, it seemed to him that time stood still, and the Soul of the World surged within him. When he looked into her dark eyes, and saw that her lips were poised between a laugh and silence, he learned the most important part of the language that all world spoke—- the language that everyone on earth was capable of understanding in their heart. It was love. Something older than humanity, more ancient than the desert. Something that exerted the same force whenever two pairs of eyes met, as had theirs here at the well. She smiled, and that was certainly an omen —- the omen he had been awaiting, without even knowing he was, for all his life.</p><p>But maybe people who felt that way had never learned the universal language. Because, when you know that language, it’s easy to understand that someone in the world awaits you, whether it’s in the middle of the desert or in some great city. And when two such people encounter each other, and their eyes meet, the past and the future become unimportant. There is only that moment, and the incredible certainty that everything under the sun has been written by one hand only. It is the hand that evokes love, and creates a twin soul for every person in the world. Without such love, one’s dreams would have no meaning.</p><p>I’m going to wait here for you every day. I have crossed the desert in search of a treasure that is somewhere near the Pyramids, and for me, the war seemed a curse. But now it’s a blessing, because it brought me to you.</p><p>“If good thins are coming, they will be a pleasant surprise.” said the seer. “If bad things are, and you know in advance, you will suffer greatly before they even occur.”</p><p>Courage is the quality most essential to understanding the Language of the World.</p><p>“It’s not what enters men’s mouths that’s evil,” said the alchemist. “ It’s what comes out of their mouths that is.”</p><p>Camels are traitorous(背信弃义的): they walk thousands of paces and never seem to tire. Then suddenly, they kneel and die. But horses tire bit by bit. You always know how much you can ask of them, and when it is that they are about to die.</p><p>From that day on, it was the desert that would be important. She would look to it every day, and would try to guess which star the boy was following in search of his treasure. She would have to send her kisses on the wind, hoping that the wind would touch the boy’s face, and would tell him that she was alive. That she was waiting for him, a woman awaiting a courageous man in search of his treasure. From that day on, the desert would represent only one thing to her: the hope for his return.</p><p>It’s because I’m the heart of a person, and people’s hearts are that way. People are afraid to pursue their most important dreams, because they feel that they don’t deserve them, or that they’ll be unable to achieve them. We, their hearts, become fearful just thinking of loved ones who go away forever, or of moment that could have been good but weren’t, or of treasures that might have been found but were forever hidden in the sands. Because, when these things happen, we suffer terribly.</p><blockquote><p>Tell your heart that the fear of suffering is worse than the suffering itself.</p></blockquote><p>Every search begins with beginner’s luck. And every search ends with the victor’s being severely(严厉地) tested.</p><blockquote><p>It said that the darkest hour of the night came just before the dawn.</p></blockquote><p>When you possess great treasures within you, and try to tell others of them, seldom are you believed.</p><p>Men have never understood the words of the wise. So gold, instead of being seen as a symbol of evolution, became the basic for conflict.</p><p>If a person is living out his Personal Legend, he knows everything he needs to know. There is only one thing that makes a dream impossible to achieve: the fear of failure.</p><p>Usually the threat of death makes people a lot more aware of their lives.</p><blockquote><p>Everything that happens once can never happen again. But everything that happens twice will surely happen a third time.</p></blockquote><p>But here he was ,at the point of finding his treasure, and he reminded himself that no project is completed until its objective has been achieved. The boy looked at the sands around him, and saw that, where his tears had fallen, a scarab beetle was scuttling through the sand. During his time in the desert, he had learned that, in Egypt, the scarab beetles are a symbol of God.</p><h3 id="Epilogue-尾声，后记"><a href="#Epilogue-尾声，后记" class="headerlink" title="Epilogue(尾声，后记)"></a>Epilogue(尾声，后记)</h3><blockquote><p>Life really is generous to those who pursue their Personal Legend.</p></blockquote><p>An inspirational companion to <em>The Alchemist</em> that invites us to live out our dreams, to embrace the uncertainly of life, and to rise to meet our own unique destiny.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;em&gt;The Alchemist&lt;/em&gt;　中文译名《牧羊少年奇幻之旅》，作者保罗·科尔贺（Paulo Coelho），&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%82%BC%E9%87%91%E6%9C%AF%E5%A3%AB_(%E5%B0%8F%E8%AF%B4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wiki介绍&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="读书" scheme="http://wuyang910217.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="笔记" scheme="http://wuyang910217.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="英语" scheme="http://wuyang910217.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>使用meteor/react过程中的一些代码片段</title>
    <link href="http://wuyang910217.github.io/2016/11/12/meteor-react-code-snippets.html"/>
    <id>http://wuyang910217.github.io/2016/11/12/meteor-react-code-snippets.html</id>
    <published>2016-11-12T08:31:40.000Z</published>
    <updated>2019-01-06T02:29:18.177Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这里是我学习<code>meteor,react</code>及其相关技术的一些代码片段和总结，持续更新．．．<a id="more"></a></p><h3 id="arrow-function"><a href="#arrow-function" class="headerlink" title="arrow function"></a>arrow function</h3><p>箭头函数的使用方法：</p><ul><li>使用大括号，里面必须有<code>return</code>语句</li><li>使用括号，里面不用<code>return</code>关键字，易读</li><li>不使用括号，适用于返回一条语句，不易读</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Meteor.publish(<span class="string">'posts.all'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Posts.find(&#123;&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//better</span></span><br><span class="line">Meteor.publish(<span class="string">'posts.all'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> Posts.find(&#123;&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//best</span></span><br><span class="line">Meteor.publish(<span class="string">'posts.all'</span>, () =&gt; (</span><br><span class="line">  Posts.find(&#123;&#125;)</span><br><span class="line">));</span><br><span class="line"><span class="comment">//fine</span></span><br><span class="line">Meteor.publish(<span class="string">'posts.all'</span>, () =&gt; Posts.find(&#123;&#125;) );</span><br></pre></td></tr></table></figure><h3 id="mongo数据库链式操作"><a href="#mongo数据库链式操作" class="headerlink" title="mongo数据库链式操作"></a>mongo数据库链式操作</h3><p>数据库结构：</p><ul><li>title —&gt;string</li><li>contents —&gt;array<ul><li>name —&gt;string</li><li>read —&gt;boolean</li><li>…</li></ul></li><li>createdAt —&gt; date</li><li>…</li></ul><p>需要传递的参数：</p><ul><li>title —&gt;string</li><li>contentName —&gt; string</li><li>read —&gt;boolean</li></ul><p>以下表示：找出标题为<code>title</code>,且内容的名字叫<code>contentName</code>的文章,并把它的内容中的已读值设置为<code>read</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Posts.update(</span><br><span class="line">  &#123; <span class="attr">title</span>: title, <span class="string">'contents.name'</span>: contentName &#125;,</span><br><span class="line">  &#123; <span class="attr">$set</span>: &#123; <span class="string">'contents.$.read'</span>: read &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="react-dangerouslySetInnerHTML"><a href="#react-dangerouslySetInnerHTML" class="headerlink" title="react dangerouslySetInnerHTML"></a>react dangerouslySetInnerHTML</h3><p>注意大括号，接受object</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div dangerouslySetInnerHTML=&#123;&#123; __html: content &#125;&#125;&gt;</span><br></pre></td></tr></table></figure><h3 id="react组件生命周期函数"><a href="#react组件生命周期函数" class="headerlink" title="react组件生命周期函数"></a>react组件生命周期函数</h3><p>上传并显示图片时，如果离开页面，然后再次返回，还会显示上次上传的图片，需要调用<code>react</code>的生命周期函数．</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">componentWillMount() &#123;</span><br><span class="line"><span class="comment">//在这里不起作用</span></span><br><span class="line">  <span class="keyword">const</span> &#123;dispatch, addCover&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  dispatch(addCover(<span class="string">''</span>));</span><br><span class="line">&#125;,</span><br><span class="line">componentWillUnmount() &#123;</span><br><span class="line"><span class="comment">//需要在组件卸载前，清空一下图片地址</span></span><br><span class="line">  <span class="keyword">const</span> &#123;dispatch, addCover&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  dispatch(addCover(<span class="string">''</span>));</span><br><span class="line">&#125;,</span><br><span class="line">componentDidMount() &#123;</span><br><span class="line"><span class="comment">//在这里传入上传后的图片地址</span></span><br><span class="line">  <span class="keyword">const</span> &#123;dispatch, addCover&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  dispatch(addCover(url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="summernote编辑器显示内容"><a href="#summernote编辑器显示内容" class="headerlink" title="summernote编辑器显示内容"></a>summernote编辑器显示内容</h3><p>让编辑器初始化时就显示传入的一些内容，比如一个html中的section内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最外层包裹编辑器，并通过dangerouslySetInnerHTML渲染html内容</span></span><br><span class="line">&lt;div className=<span class="string">'editor'</span>&gt;</span><br><span class="line">  &lt;div dangerouslySetInnerHTML=&#123;&#123; <span class="attr">__html</span>: section.content &#125;&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/初始化，这样section中的内容就会在编辑器中渲染出来</span></span><br><span class="line"><span class="regexp">componentDidMount() &#123;</span></span><br><span class="line"><span class="regexp">  $('.editor').summernote(&#123;</span></span><br><span class="line"><span class="regexp">    height: 250</span></span><br><span class="line"><span class="regexp">  &#125;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="summernote编辑器的api调用"><a href="#summernote编辑器的api调用" class="headerlink" title="summernote编辑器的api调用"></a>summernote编辑器的api调用</h3><p>假如我们希望点击显示或隐藏按钮后，编辑器能够动态显示，而不刷新整个页面，需要如下操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入页面后，初始化编辑器</span></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">  $(<span class="string">'.editor'</span>).summernote(&#123;</span><br><span class="line">    height: <span class="number">250</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//组件有更新，只需调用summernote的reset api即可实现</span></span><br><span class="line">componentDidUpdate() &#123;</span><br><span class="line">  $(<span class="string">'.editor'</span>).summernote(<span class="string">'reset'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个页面有多个编辑器，需要调用以下的生命周期函数和编辑器的api</span></span><br><span class="line"><span class="comment">//进入页面后，初始化编辑器</span></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">  $(<span class="string">'.editor'</span>).summernote(&#123;</span><br><span class="line">    height: <span class="number">250</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//在这里删除</span></span><br><span class="line">componentWillUpdate() &#123;</span><br><span class="line">  $(<span class="string">'editor'</span>).each( <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    $(<span class="keyword">this</span>).summernote(<span class="string">'destroy'</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//再次初始化</span></span><br><span class="line">componentDidUpdate() &#123;</span><br><span class="line">  $(<span class="string">'.editor'</span>).summernote(&#123;</span><br><span class="line">    height: <span class="number">250</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lodash中sortBy进行数组排序"><a href="#lodash中sortBy进行数组排序" class="headerlink" title="lodash中sortBy进行数组排序"></a>lodash中sortBy进行数组排序</h3><p>比如一篇文章有很多评论，需要根据评论数目进行排序，我们可以直接返回排序过的数组．</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> singlePost = Posts.findOne();</span><br><span class="line"><span class="keyword">const</span> sortedComments = _.sortBy(singlePost.comments, [<span class="string">'count'</span>]);</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;这里是我学习&lt;code&gt;meteor,react&lt;/code&gt;及其相关技术的一些代码片段和总结，持续更新．．．
    
    </summary>
    
      <category term="Tech" scheme="http://wuyang910217.github.io/categories/Tech/"/>
    
    
      <category term="meteor" scheme="http://wuyang910217.github.io/tags/meteor/"/>
    
      <category term="react" scheme="http://wuyang910217.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>kindle中导出笔记</title>
    <link href="http://wuyang910217.github.io/2016/11/10/kindle-notes-export.html"/>
    <id>http://wuyang910217.github.io/2016/11/10/kindle-notes-export.html</id>
    <published>2016-11-10T11:19:30.000Z</published>
    <updated>2019-01-06T02:29:18.175Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>用过kindle的朋友会知道，我们标注后的内容会存在设备目录下的<code>documents/My Clippings.txt</code>文件中，里面内容很多，阅读起来很乱，更别说再次整理了．<a id="more"></a>所以有了<a href="https://www.clippings.io/" target="_blank" rel="noopener">clippings.io</a>等工具，让我们可以方便地管理标注的内容，并导出为<code>pdf</code>等常见格式．</p><p>但操作起来流程很多，需要先让kindle连上电脑，取出其中的<code>My Clippings.txt</code>文件，并上传到 <strong>clippings.io</strong> 网站上，然后网站会自动读取其中的内容，并生成全部的内容．</p><p>网站很强大，但却不是我想要的，我不想要全部的内容，而是读完一部小说或作品后，就可以导出标注的内容．<strong>没想到，<code>kindle</code>已经实现了这个功能</strong>，不知是最近更新后的功能，还是以前没有在意，总之非常方便和实用．</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>在我们阅读的作品中，点击屏幕左上角，有一个前往按钮，点击按钮，有作品的目录和标注的笔记，点击笔记，在最下面有一个导出笔记按钮，点击后，kindle就会发送你的笔记和标注内容到你的注册邮箱中，其中有pdf和excel格式的文件．下载后保存即可．</p><p>另外，亚马逊生成的pdf文件格式很好看，如下图：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://image.wangjuntao.com/kindle-clippings.png" alt="kindle"></div><div class="image-caption">kindle</div></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;用过kindle的朋友会知道，我们标注后的内容会存在设备目录下的&lt;code&gt;documents/My Clippings.txt&lt;/code&gt;文件中，里面内容很多，阅读起来很乱，更别说再次整理了．
    
    </summary>
    
      <category term="Tools" scheme="http://wuyang910217.github.io/categories/Tools/"/>
    
    
      <category term="kindle" scheme="http://wuyang910217.github.io/tags/kindle/"/>
    
  </entry>
  
  <entry>
    <title>react学习--增强型组件</title>
    <link href="http://wuyang910217.github.io/2016/09/15/react-enhanced-component-demo.html"/>
    <id>http://wuyang910217.github.io/2016/09/15/react-enhanced-component-demo.html</id>
    <published>2016-09-15T14:42:58.000Z</published>
    <updated>2019-01-06T02:29:18.180Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>很多<code>react</code>相关的包都有这样的语法<code>export default SomeComponent(App);</code>,我们自己也可以创建，以下是一个小demo．<a id="more"></a></p><blockquote><p>It’s no longer possible to use React mixin mechanism for components written in ES6.</p></blockquote><p>参考网站：<a href="http://egorsmirnov.me/2015/09/30/react-and-es6-part4.html" target="_blank" rel="noopener">react-and-es6</a></p><h3 id="Timer-js"><a href="#Timer-js" class="headerlink" title="Timer.js"></a>Timer.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TimerEnhance = <span class="function"><span class="params">Compose</span> =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">Timer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">//es7语法</span></span><br><span class="line">  <span class="comment">//显示在react developer tools中，位于顶部，不写为默认的Timer</span></span><br><span class="line">  <span class="keyword">static</span> displayName = <span class="string">'ComponentEnhancedWithIntervalHOC'</span>;</span><br><span class="line">  <span class="comment">// 默认值　测试</span></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123; <span class="attr">name</span>: <span class="string">'test'</span>, <span class="attr">number</span>: <span class="number">3</span>&#125;;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state=&#123;<span class="attr">seconds</span>: <span class="number">0</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.interval = setInterval(<span class="keyword">this</span>.tick.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            seconds: <span class="keyword">this</span>.state.seconds + <span class="number">1000</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Compose &#123;...this.state&#125; &#123;...this.props&#125;/&gt;</span><br><span class="line">        &lt;h1&gt;TimerEnhance&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TimerEnhance &#125; <span class="keyword">from</span> <span class="string">'./Timer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es7语法　</span></span><br><span class="line"><span class="comment">// @TimerEnhance</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">//es7语法　默认state</span></span><br><span class="line">  state = &#123;<span class="attr">value</span>: <span class="string">''</span>&#125;;</span><br><span class="line">  handleClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: <span class="keyword">this</span>.state.value+<span class="string">'new'</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// TimerEnhance中的state,props都会转化为props，并且在App组件中，可以直接调用，如this.props.seconds</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props,<span class="keyword">this</span>.state);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Test: &#123;<span class="keyword">this</span>.props.seconds&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.handleClick&#125; &gt;Click &#123;this.state.value&#125;&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default TimerEnhance(App);</span></span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.querySelector('#root'));</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;很多&lt;code&gt;react&lt;/code&gt;相关的包都有这样的语法&lt;code&gt;export default SomeComponent(App);&lt;/code&gt;,我们自己也可以创建，以下是一个小demo．
    
    </summary>
    
      <category term="Tech" scheme="http://wuyang910217.github.io/categories/Tech/"/>
    
    
      <category term="react" scheme="http://wuyang910217.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react学习－－官方文档中事件绑定的３中方法</title>
    <link href="http://wuyang910217.github.io/2016/09/08/react-bind-three-ways.html"/>
    <id>http://wuyang910217.github.io/2016/09/08/react-bind-three-ways.html</id>
    <published>2016-09-08T14:42:58.000Z</published>
    <updated>2019-01-06T02:29:18.179Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>最近，<a href="https://facebook.github.io/react/" target="_blank" rel="noopener">react</a>的官方文档有了一次更新，文档描述的更加易懂，其中介绍了事件绑定的３种不同的写法，这里做一下总结．<a id="more"></a></p><ul><li>３中写法,如今第一种最常见，在constructor中进行绑定</li><li>第二种是es2016特性–<code>property initializer syntax</code></li><li>第三种是<code>arrow function in the callback</code></li></ul><p><a href="http://egorsmirnov.me/2015/08/16/react-and-es6-part3.html" target="_blank" rel="noopener">这篇文章</a>介绍了更多的方法，可以参考</p><h3 id="完整实例"><a href="#完整实例" class="headerlink" title="完整实例"></a>完整实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//　第一种方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoApp1</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      items: [],</span><br><span class="line">      text: <span class="string">''</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 这里绑定</span></span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 还能简写</span></span><br><span class="line">    <span class="comment">// this.handleChange = ::this.handleChange;</span></span><br><span class="line">    <span class="comment">// this.handleSubmit = ::this.handleSubmit;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt; Todo &lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">        &lt;TodoList data=&#123;this.state.items&#125; /</span>&gt;</span><br><span class="line">        &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125; &gt;</span><br><span class="line">          &lt;input onChange=&#123;<span class="keyword">this</span>.handleChange&#125; value=&#123;<span class="keyword">this</span>.state.text&#125; /&gt;</span><br><span class="line">          &lt;button&gt;Add #&#123;this.state.items.length+1&#125;&lt;/button&gt;</span><br><span class="line">        &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第一种方法----'</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState( &#123;<span class="attr">text</span>: e.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit(e) &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">const</span> newItem = &#123;</span><br><span class="line">      text: <span class="keyword">this</span>.state.text,</span><br><span class="line">      id: <span class="built_in">Date</span>.now(),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.setState( <span class="function">(<span class="params">prevState</span>) =&gt;</span> (&#123;</span><br><span class="line">      items: prevState.items.concat(newItem),</span><br><span class="line">      text: <span class="string">''</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoApp2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      items: [],</span><br><span class="line">      text: <span class="string">''</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt; Todo &lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">        &lt;TodoList data=&#123;this.state.items&#125; /</span>&gt;</span><br><span class="line">        &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125; &gt;</span><br><span class="line">          &#123;<span class="comment">/* 注意这里不加括号 */</span>&#125;</span><br><span class="line">          &lt;input onChange=&#123;<span class="keyword">this</span>.handleChange&#125; value=&#123;<span class="keyword">this</span>.state.text&#125; /&gt;</span><br><span class="line">          &lt;button&gt;Add #&#123;this.state.items.length+1&#125;&lt;/button&gt;</span><br><span class="line">        &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 属性初始化　</span></span><br><span class="line">  handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第二种方法----'</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState( &#123;<span class="attr">text</span>: e.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">const</span> newItem = &#123;</span><br><span class="line">      text: <span class="keyword">this</span>.state.text,</span><br><span class="line">      id: <span class="built_in">Date</span>.now(),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.setState( <span class="function">(<span class="params">prevState</span>) =&gt;</span> (&#123;</span><br><span class="line">      items: prevState.items.concat(newItem),</span><br><span class="line">      text: <span class="string">''</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoApp3</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      items: [],</span><br><span class="line">      text: <span class="string">''</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt; Todo &lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">        &lt;TodoList data=&#123;this.state.items&#125; /</span>&gt;</span><br><span class="line">        &lt;form onSubmit=&#123;(e) =&gt; <span class="keyword">this</span>.handleSubmit(e)&#125; &gt;</span><br><span class="line">          &#123;<span class="comment">/* 这里必须有括号　　this.handleChange(e)  */</span>&#125;</span><br><span class="line">          &lt;input onChange=&#123;(e) =&gt; <span class="keyword">this</span>.handleChange(e)&#125; value=&#123;<span class="keyword">this</span>.state.text&#125; /&gt;</span><br><span class="line">          &lt;button&gt;Add #&#123;this.state.items.length+1&#125;&lt;/button&gt;</span><br><span class="line">        &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第三种方法----'</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState( &#123;<span class="attr">text</span>: e.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit(e) &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">const</span> newItem = &#123;</span><br><span class="line">      text: <span class="keyword">this</span>.state.text,</span><br><span class="line">      id: <span class="built_in">Date</span>.now(),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.setState( <span class="function">(<span class="params">prevState</span>) =&gt;</span> (&#123;</span><br><span class="line">      items: prevState.items.concat(newItem),</span><br><span class="line">      text: <span class="string">''</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">      render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">           &#123;<span class="keyword">this</span>.props.data.map(<span class="function">(<span class="params">item,index</span>) =&gt;</span> (</span><br><span class="line">             &lt;li key=&#123;item.id&#125;&gt; &#123;index+<span class="number">1</span>&#125;---&gt;&#123;item.text&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">           ))&#125;</span></span><br><span class="line"><span class="regexp">          &lt;/u</span>l&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;TodoApp1 /&gt;</span><br><span class="line">        &lt;TodoApp2 /&gt;</span><br><span class="line">        &lt;TodoApp3 /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Todo /</span>&gt;, <span class="built_in">document</span>.querySelector(<span class="string">'#root'</span>));</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;最近，&lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react&lt;/a&gt;的官方文档有了一次更新，文档描述的更加易懂，其中介绍了事件绑定的３种不同的写法，这里做一下总结．
    
    </summary>
    
      <category term="Tech" scheme="http://wuyang910217.github.io/categories/Tech/"/>
    
    
      <category term="react" scheme="http://wuyang910217.github.io/tags/react/"/>
    
      <category term="events" scheme="http://wuyang910217.github.io/tags/events/"/>
    
  </entry>
  
  <entry>
    <title>flow-router加载react组件及React中props的验证类型</title>
    <link href="http://wuyang910217.github.io/2016/09/02/react-proptypes.html"/>
    <id>http://wuyang910217.github.io/2016/09/02/react-proptypes.html</id>
    <published>2016-09-02T14:42:58.000Z</published>
    <updated>2019-01-06T02:29:18.180Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在<code>flow-router</code>中，需要配合使用<code>react-mounter</code>来加载<code>react</code>组件，官方文档中给出了两种写法，<a id="more"></a>随着<code>react</code>的发展，有些可能会报错．</p><h3 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const MainLayout = (&#123;content&#125;) =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;header&gt;</span><br><span class="line">        This is our header</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">      &lt;main&gt;</span><br><span class="line">        &#123;content()&#125;</span><br><span class="line">      &lt;/main&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mount(MainLayout, &#123;</span><br><span class="line">  content: () =&gt; (&lt;WelcomeComponent name=&quot;Arunoda&quot; /&gt;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在需要使用如下格式,特别是<code>this.props.content()</code>，不然会报错：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">AppLayout</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Header /&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.content()&#125;</span><br><span class="line">          &lt;Footer /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">AppLayout.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  content: PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/在路由文件中，调用</span></span><br><span class="line"><span class="regexp">mount(AppLayout, &#123;</span></span><br><span class="line"><span class="regexp">    content: () =&gt; (&lt;Welcome /</span>&gt;),</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p></p><p>注意，它的类型为<code>PropTypes.func</code>,是个函数，其他类型会报错；</p><h3 id="另一种写法"><a href="#另一种写法" class="headerlink" title="另一种写法"></a>另一种写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">AppLayout</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Header /&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.content&#125;</span><br><span class="line">          &lt;Footer /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">AppLayout.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  content: PropTypes.element.isRequired,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/在路由文件中，调用</span></span><br><span class="line"><span class="regexp">mount(AppLayout, &#123;</span></span><br><span class="line"><span class="regexp">    content: &lt;Welcome /</span>&gt;,</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>注意，这里它的类型为<code>PropTypes.element</code>；</p><h3 id="所有PropTypes类型"><a href="#所有PropTypes类型" class="headerlink" title="所有PropTypes类型"></a>所有PropTypes类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">// 基本类型，默认可传可不传</span><br><span class="line">React.PropTypes.array</span><br><span class="line">React.PropTypes.bool</span><br><span class="line">React.PropTypes.func</span><br><span class="line">React.PropTypes.number</span><br><span class="line">React.PropTypes.object</span><br><span class="line">React.PropTypes.string</span><br><span class="line"></span><br><span class="line">// 所有可以被渲染的对象：数字，字符串，DOM 元素或包含这些类型的数组</span><br><span class="line">React.PropTypes.node</span><br><span class="line"></span><br><span class="line">//react元素</span><br><span class="line">React.PropTypes.element</span><br><span class="line"></span><br><span class="line"> // 用 JS 的 instanceof 操作符声明 prop 为类的实例。</span><br><span class="line">    optionalMessage: React.PropTypes.instanceOf(Message),</span><br><span class="line"></span><br><span class="line">    // 用 enum 来限制 prop 只接受指定的值。</span><br><span class="line">    optionalEnum: React.PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]),</span><br><span class="line"></span><br><span class="line">    // 指定的多个对象类型中的一个</span><br><span class="line">    optionalUnion: React.PropTypes.oneOfType([</span><br><span class="line">      React.PropTypes.string,</span><br><span class="line">      React.PropTypes.number,</span><br><span class="line">      React.PropTypes.instanceOf(Message)</span><br><span class="line">    ]),</span><br><span class="line"></span><br><span class="line">    // 指定类型组成的数组</span><br><span class="line">    optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),</span><br><span class="line"></span><br><span class="line">    // 指定类型的属性构成的对象</span><br><span class="line">    optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),</span><br><span class="line"></span><br><span class="line">    // 特定形状参数的对象</span><br><span class="line">    optionalObjectWithShape: React.PropTypes.shape(&#123;</span><br><span class="line">      color: React.PropTypes.string,</span><br><span class="line">      fontSize: React.PropTypes.number</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    // 以后任意类型加上 `isRequired` 来使 prop 不可空。</span><br><span class="line">    requiredFunc: React.PropTypes.func.isRequired,</span><br><span class="line"></span><br><span class="line">    // 不可空的任意类型</span><br><span class="line">    requiredAny: React.PropTypes.any.isRequired,</span><br><span class="line"></span><br><span class="line">    // 自定义验证器。如果验证失败需要返回一个 Error 对象。不要直接</span><br><span class="line">    // 使用 `console.warn` 或抛异常，因为这样 `oneOfType` 会失效。</span><br><span class="line">    customProp: function(props, propName, componentName) &#123;</span><br><span class="line">      if (!/matchme/.test(props[propName])) &#123;</span><br><span class="line">        return new Error(&apos;Validation failed!&apos;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;flow-router&lt;/code&gt;中，需要配合使用&lt;code&gt;react-mounter&lt;/code&gt;来加载&lt;code&gt;react&lt;/code&gt;组件，官方文档中给出了两种写法，
    
    </summary>
    
      <category term="Tech" scheme="http://wuyang910217.github.io/categories/Tech/"/>
    
    
      <category term="flow-router" scheme="http://wuyang910217.github.io/tags/flow-router/"/>
    
      <category term="react" scheme="http://wuyang910217.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>flow-router中404页面---page not found的处理</title>
    <link href="http://wuyang910217.github.io/2016/08/22/meteor-flowrouter-data-not-found.html"/>
    <id>http://wuyang910217.github.io/2016/08/22/meteor-flowrouter-data-not-found.html</id>
    <published>2016-08-22T14:42:58.000Z</published>
    <updated>2019-01-06T02:29:18.176Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>一般网站的404页面包括两种类型：</p><p>1.路由匹配失败，没有此路由；</p><p>2.路由匹配成功，但参数不对，没有数据显示。</p><p>对于第一种情况，<code>flow-router</code>和<code>iron-router</code>都能轻松的处理，但对于第二种情况，<code>iron-router</code>可以设置<code>dataNotFound</code>的hook，而<code>flow-router</code>文档中并没有提及。本文就是对这种情况的总结。</p><h3 id="场景还原"><a href="#场景还原" class="headerlink" title="场景还原"></a>场景还原</h3><p>例如，在<code>imports/startup/routes.js</code>中，我定义了下面的路由，用于显示某个内容的详细信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FlowRouter.route(<span class="string">'/detail/:queryId'</span>,&#123;</span><br><span class="line">  name: <span class="string">'detail'</span>,</span><br><span class="line">  action: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    BlazeLayout.render(<span class="string">'mainLayout'</span>, &#123;<span class="attr">main</span>: <span class="string">'detail'</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中参数<code>:queryId</code>对应于<code>Mongo</code>数据库中的<code>_id</code>字段，当<code>_id</code>不存在时，我需要显示404页面，而不再渲染此页面的<code>detail</code>模板。</p><p>其中<code>BlazeLayout</code>需要添加<code>kadira:blaze-layout</code>包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#终端执行</span><br><span class="line">meteor add kadira:blaze-layout</span><br><span class="line">#在路由文件中引入</span><br><span class="line">import &#123; BlazeLayout &#125; from &apos;meteor/kadira:blaze-layout&apos;;</span><br></pre></td></tr></table></figure><p>具体用法请看<a href="https://github.com/kadirahq/blaze-layout" target="_blank" rel="noopener">文档</a></p><h3 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h3><p>为了检查<code>:queryId</code>是否存在，我想到了<code>flow-router</code>中的<code>triggersEnter</code>方法，当执行此路由时，先检查数据是否存在，如果不存在，就直接渲染<code>notFound</code>，并且停止路由中<code>action</code>方法的执行，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FlowRouter.route(<span class="string">'/detail/:queryId'</span>,&#123;</span><br><span class="line">  name: <span class="string">'detail'</span>,</span><br><span class="line">  triggersEnter: [notExist],</span><br><span class="line">  action: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    BlazeLayout.render(<span class="string">'mainLayout'</span>, &#123;<span class="attr">main</span>: <span class="string">'detail'</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">#定义notExist函数</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notExist</span>(<span class="params">context,redirect,stop</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> id = context.params.queryId;</span><br><span class="line">  <span class="built_in">console</span>.log(id);</span><br><span class="line">  <span class="keyword">let</span> detailContent = Resources.findOne(&#123;<span class="attr">_id</span>: id&#125;) || &#123;&#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(detailContent.fetch());</span><br><span class="line">  <span class="keyword">if</span> (isEmpty(detailContent)) &#123;</span><br><span class="line">    BlazeLayout.render(<span class="string">'notFound'</span>);</span><br><span class="line">    stop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>notExist</code>函数共有3个参数，<code>context</code>必须，<code>redirect</code>可以没有，<code>stop</code>此方法必须。<br>从<code>context</code>中，我们可以得到其<code>id</code>，然后通过查询数据库，检查返回的数据是否为空，如果为空，就执行<code>BlazeLayout.render(&#39;notFound&#39;);</code>，并且停止路由的下一步进行。</p><p>其中<code>isEmpty</code>来源于<code>lodash</code>库：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#终端执行</span><br><span class="line">meteor npm i -S lodash</span><br><span class="line">#路由文件中引入</span><br><span class="line">import &#123; isEmpty &#125; from &apos;lodash/lang&apos;;</span><br></pre></td></tr></table></figure><p></p><h3 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h3><p>看起来逻辑没有错误，但是运行起来发现，当刷新页面时，就会显示404，而且浏览器终端也出现错误，通过<code>console.log()</code>对数据返回值的检查，发现<code>Resources.findOne({_id: id})</code>一直返回空对象，表示在<code>route</code>中数据库不起作用。</p><h3 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h3><p>在路由中没有成功，我准备在模板<code>imports/ui/template/detail.js</code>中再次尝试，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#在onCreated方法中订阅</span><br><span class="line">Template.detail.onCreated(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  self.content = <span class="keyword">new</span> ReactiveDict();</span><br><span class="line">  <span class="keyword">let</span> queryId = FlowRouter.getParam(<span class="string">'queryId'</span>);</span><br><span class="line">  self.subscribe(<span class="string">'detail'</span>, queryId);</span><br><span class="line">&#125;);</span><br><span class="line">#在helpers中定义detail方法</span><br><span class="line">Template.detail.helpers(&#123;</span><br><span class="line">  detail() &#123;</span><br><span class="line">    <span class="keyword">let</span> id = FlowRouter.getParam(<span class="string">'queryId'</span>);</span><br><span class="line">    <span class="keyword">let</span> detailContent = Resources.findOne(&#123; <span class="attr">_id</span>: id &#125;) || &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty(detailContent)) &#123;</span><br><span class="line">      FlowRouter.go(<span class="string">'/404'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> instance = Template.instance();</span><br><span class="line">      instance.content.set(<span class="string">'content-detail'</span>, detailContent);</span><br><span class="line">      <span class="built_in">console</span>.log(detailContent,detailContent.contents.mimeType);</span><br><span class="line">      <span class="keyword">return</span> detailContent;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;）</span><br></pre></td></tr></table></figure><p>通过<code>FlowRouter.getParam</code>得到<code>id</code>，然后数据库查找，如果数据库为空，显示404页面；如果不为空，储存返回值<code>detailContent</code>到<code>ReactiveDict</code>中，用于在模板中获取内容。</p><p>没想到，这次成功了，看来在路由文件声明中，不能使用数据库的查找。</p><h3 id="小的改进"><a href="#小的改进" class="headerlink" title="小的改进"></a>小的改进</h3><p>上面代码中，我使用了<code>FlowRouter.go(&#39;/404&#39;)</code>，这样就必须定义一个新的路由，没有必要，并且，浏览器地址栏就会变成如<code>www.example.com/404</code>；而如果使用<code>BlazeLayout.render(&#39;notFound&#39;)</code>，浏览器地址不会改变，如<code>www.example.com/detail/ddddddd</code>。</p><p>可以直接改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isEmpty(detailContent)) &#123;</span><br><span class="line">  BlazeLayout.render(<span class="string">'notFound'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p>但是有一个问题，刷新页面时，会闪过<code>mainLayout</code>布局文件的内容，如<code>navbar</code>，需要继续改进：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isEmpty(detailContent)) &#123;</span><br><span class="line">  BlazeLayout.render(<span class="string">'mainLayout'</span>, &#123;<span class="attr">main</span>: <span class="string">'dataNotFound'</span>&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p>这里，我新建了一个模板文件<code>dataNotFound</code>，因为<code>notFound</code>模板样式与<code>mainLayout</code>的样式不一定兼容，最好是分开。</p><p>这样，对于文章开头的两种情况：</p><ul><li>notFound 对应于第一种，显示全局的404页面</li><li>dataNotFound 对应于第二种，显示数据没有找到的404页面</li></ul><h3 id="小的问题"><a href="#小的问题" class="headerlink" title="小的问题"></a>小的问题</h3><p>在<code>Template.detail.helpers()</code>中，不止一个<code>helper</code>，比如我还定义了<code>isImage</code>方法，用于检查类型是否为图片：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isImage(type) &#123;</span><br><span class="line">  <span class="keyword">return</span> type.indexOf(<span class="string">'image/'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在浏览器终端，就会出现这样的错误信息：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://image.wangjuntao.com/indexOf-error.png" alt="error"></div><div class="image-caption">error</div></figure><p>原因出在哪，不清楚，但使用<code>lodash</code>中的<code>startsWith</code>方法替代后，错误信息就没了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#首先引入</span><br><span class="line">import &#123; startsWith &#125; from &apos;lodash/string&apos;;</span><br><span class="line">#修改为</span><br><span class="line">isImage(type) &#123;</span><br><span class="line">  return startsWith(type, &apos;image/&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后说明"><a href="#最后说明" class="headerlink" title="最后说明"></a>最后说明</h3><p><strong>Meteor版本： 1.4.1.1</strong><br><strong>Flow-router版本： 2.12.1</strong></p><p><em>Meteor</em>从1.3版本开始，就能使用<code>npm</code>包了，并且项目结构有所改变，比如在<code>detail.js</code>文件开头，使用<code>ES6语法</code>来引入可能需要的包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#使用meteor add添加的包</span><br><span class="line">import &#123; Meteor &#125; from &apos;meteor/meteor&apos;;</span><br><span class="line">import &#123; FlowRouter &#125; from &apos;meteor/kadira:flow-router&apos;;</span><br><span class="line">import &#123; Template &#125; from &apos;meteor/templating&apos;;</span><br><span class="line">import &#123; ReactiveDict &#125; from &apos;meteor/reactive-dict&apos;;</span><br><span class="line">import &#123; BlazeLayout &#125; from &apos;meteor/kadira:blaze-layout&apos;;</span><br><span class="line">#npm包</span><br><span class="line">import &#123; startsWith &#125; from &apos;lodash/string&apos;;</span><br><span class="line">import &#123; isEmpty &#125; from &apos;lodash/lang&apos;;</span><br><span class="line"># 项目文件</span><br><span class="line">import &#123; Resources &#125; from &apos;../../api/resources.js&apos;;</span><br><span class="line">import &apos;./detail.html&apos;;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;一般网站的404
      
    
    </summary>
    
      <category term="Tech" scheme="http://wuyang910217.github.io/categories/Tech/"/>
    
    
      <category term="meteor" scheme="http://wuyang910217.github.io/tags/meteor/"/>
    
      <category term="flow-router" scheme="http://wuyang910217.github.io/tags/flow-router/"/>
    
  </entry>
  
  <entry>
    <title>flow-router中params的使用</title>
    <link href="http://wuyang910217.github.io/2016/08/20/flow-router-params.html"/>
    <id>http://wuyang910217.github.io/2016/08/20/flow-router-params.html</id>
    <published>2016-08-20T11:19:30.000Z</published>
    <updated>2019-01-06T02:29:18.170Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>最近学习了一下<code>flow-router</code>的使用，对于<code>/detail/:queryId</code>这样的路由如何传递参数做一下总结。<a id="more"></a></p><h5 id="场景还原"><a href="#场景还原" class="headerlink" title="场景还原"></a>场景还原</h5><p>例如，我们网站的主页面显示很多图片，而详情页显示每个具体图片的详细信息，在我们的<code>routes.js</code>文件中，可以这样定义两个路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主页面</span></span><br><span class="line">FlowRouter.route(<span class="string">'/main'</span>,&#123;</span><br><span class="line">  name: <span class="string">'main'</span>,</span><br><span class="line">  action: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    BlazeLayout.render(<span class="string">'mainLayout'</span>, &#123;<span class="attr">main</span>: <span class="string">'main'</span>&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  subscriptions: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.register(<span class="string">'mainpage'</span>,Meteor.subscribe(<span class="string">'contents'</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 详情页面</span></span><br><span class="line">FlowRouter.route(<span class="string">'/detail/:queryId'</span>,&#123;</span><br><span class="line">  name: <span class="string">'detail'</span>,</span><br><span class="line">  action: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    BlazeLayout.render(<span class="string">'mainLayout'</span>, &#123;<span class="attr">main</span>: <span class="string">'detail'</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意，上面我们通过<code>subscriptions</code>方法订阅了所有内容的数据库，这是<code>flow-router</code>提供的方法，具体用法见文档：<a href="https://github.com/kadirahq/flow-router" target="_blank" rel="noopener">flow-router</a></p><p>那么问题是如何得到每个<code>:queryId</code>，以及通过<code>:queryId</code>如何得到详细内容数据？</p><h5 id="params的定义"><a href="#params的定义" class="headerlink" title="params的定义"></a>params的定义</h5><p>首先在模板文件<code>main.html</code>中，定义两个模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">'main'</span>&gt;</span></span><br><span class="line">  &#123;&#123;#each contents&#125;&#125; &#123;&#123;&gt; content&#125;&#125; &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">'content'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;pathForDetail&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;contents.url&#125;&#125;"</span> <span class="attr">alt</span>=<span class="string">"&#123;&#123;contents.name&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们显示所有的图片，且每张图片都是一个指向详情页的链接。更多<code>Blaze</code>模板系统的用法，请参考官方文档：<a href="http://blazejs.org/" target="_blank" rel="noopener">Blaze</a></p><p>然后我们要在<code>main.js</code>中定义一些<code>helpers</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Template.main.helpers(&#123;</span><br><span class="line">  contents() &#123;</span><br><span class="line">    <span class="keyword">return</span> Resources.find(&#123;&#125;, &#123;<span class="attr">sort</span>: &#123;<span class="attr">createdAt</span>: <span class="number">-1</span>&#125;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Template.content.helpers(&#123;</span><br><span class="line">  pathForDetail() &#123;</span><br><span class="line">    <span class="keyword">const</span> params = &#123;<span class="attr">queryId</span>: <span class="keyword">this</span>._id&#125;;</span><br><span class="line">    <span class="keyword">return</span> FlowRouter.path(<span class="string">'detail'</span>, params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>重点就在这里</strong>，我们通过<code>const params = {queryId: this._id};</code>这一条语句获得每张图片的<code>queryId</code>，并保存在<code>params</code>里，然后通过<code>FlowRouter.path()</code>方法生成完整的路径url。这样我们点击任意一张图片，就能进入到与之对应的详情页面。注意：<strong><code>queryId</code>要和路由中定义的参数名保持一致；我们可以定义任何的params，不局限于id。</strong></p><h5 id="params的获得"><a href="#params的获得" class="headerlink" title="params的获得"></a>params的获得</h5><p>在<code>publish.js</code>中，我们定义了详情页的内容数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Meteor.publish(&apos;detail&apos;,(id) =&gt; &#123;</span><br><span class="line">  return Resources.find(&#123;_id: id&#125;,&#123;fields: &#123;contents: 1&#125;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在<code>detail.js</code>中，我们要<code>subscirbe</code>这一数据，那这个<code>id</code>如何获得呢，这就需要刚才我们储存在params里的值了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Template.detail.onCreated(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> queryId = FlowRouter.getParam(<span class="string">'queryId'</span>);</span><br><span class="line">  <span class="keyword">this</span>.subscribe(<span class="string">'detail'</span>, queryId);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>只要我们需要图片的<code>id</code>，我们就可以从<code>params</code>里得到。接着我们还要定义<code>helpers</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Template.detail.helpers(&#123;</span><br><span class="line">  detail() &#123;</span><br><span class="line">    <span class="keyword">const</span> id = FlowRouter.getParam(<span class="string">'queryId'</span>);</span><br><span class="line">    <span class="keyword">return</span> Resources.findOne(&#123; <span class="attr">_id</span>: id &#125;) || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样我们在模板中就可以通过<code>detail</code>这个<code>helper</code>，得到我们想要的任何数据。</p><h5 id="更近一步"><a href="#更近一步" class="headerlink" title="更近一步"></a>更近一步</h5><p>我们的<code>detail</code>方法还能改进，设想一下，我们需要在其他地方使用这个数据库的内容，比如其他的<code>helper</code>，或者<code>events</code>事件中，可是我们却没有地方获得。所以需要我们保存这个数据库的内容，代码可以改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Template.detail.helpers(&#123;</span><br><span class="line">  detail() &#123;</span><br><span class="line">    <span class="keyword">const</span> id = FlowRouter.getParam(<span class="string">'queryId'</span>);</span><br><span class="line">    <span class="keyword">const</span> detailContent = Resources.findOne(&#123; <span class="attr">_id</span>: id &#125;) || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> instance = Template.instance();</span><br><span class="line">    instance.content.set(<span class="string">'content-detail'</span>, detailContent);</span><br><span class="line">    <span class="built_in">console</span>.log(instance.content.get(<span class="string">'content-detail'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们把数据存到名字叫<code>content</code>的<code>ReactiveDict</code>中，这样我们在其他地方就能获取内容了,比如在<code>events</code>里：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = instance.get(<span class="string">'content-detail'</span>).contents.name;</span><br><span class="line"><span class="keyword">const</span> url = instance.get(<span class="string">'content-detail'</span>).contents.url;</span><br></pre></td></tr></table></figure><p>注意,<code>flow-router</code>默认安装了这个包，我们只需要引入这个包，并且初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ReactiveDict &#125; from &apos;meteor/reactive-dict&apos;;</span><br><span class="line"></span><br><span class="line">Template.detail.onCreated(function() &#123;</span><br><span class="line">  this.content = new ReactiveDict();</span><br><span class="line">  ......</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="最后-一张图"><a href="#最后-一张图" class="headerlink" title="最后 一张图"></a>最后 一张图</h5><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://image.wangjuntao.com/flow-router-getData.png" alt="getData"></div><div class="image-caption">getData</div></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h5 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h5&gt;&lt;p&gt;最近学习了一下&lt;code&gt;flow-router&lt;/code&gt;的使用，对于&lt;code&gt;/detail/:queryId&lt;/code&gt;这样的路由如何传递参数做一下总结。
    
    </summary>
    
      <category term="Tech" scheme="http://wuyang910217.github.io/categories/Tech/"/>
    
    
      <category term="meteor" scheme="http://wuyang910217.github.io/tags/meteor/"/>
    
      <category term="flow-router" scheme="http://wuyang910217.github.io/tags/flow-router/"/>
    
  </entry>
  
  <entry>
    <title>Meteor中异步回调函数的错误处理</title>
    <link href="http://wuyang910217.github.io/2016/08/18/meteor-try-catch-handle-error.html"/>
    <id>http://wuyang910217.github.io/2016/08/18/meteor-try-catch-handle-error.html</id>
    <published>2016-08-18T11:19:30.000Z</published>
    <updated>2019-01-06T02:29:18.178Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>七牛云</strong> 的内容管理默认没有文件的缩略图，如果我们想找某一张图片就会很头疼，所以我用<code>Meteor</code>做了一个小的demo，用来显示文件的缩略图，并有删除、移动、复制、下载等基本的操作功能。<a id="more"></a>对于其中的错误处理，遇到了一些问题，在这里总结一下。</p><p>demo图片：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://image.wangjuntao.com/qiniu-manager-detail.png?imageView2/2/w/600/h/300/interlace/0/q/100" alt="qiniu-manager"></div><div class="image-caption">qiniu-manager</div></figure><h3 id="服务器端异步回调函数"><a href="#服务器端异步回调函数" class="headerlink" title="服务器端异步回调函数"></a>服务器端异步回调函数</h3><p>在<code>Meteor</code>中，我们不能直接在<code>Meteor.method()</code>方法里调用异步函数，会报错，根据提示信息，我们可以用<code>Meteor.bindEnvironment(function(err, ret){}</code>这样的方式来绑定异步函数，不过在<a href="https://atmospherejs.com/" target="_blank" rel="noopener">Atmospherejs</a>上，已经有现成的包来提供更优雅的方式，就是<a href="https://atmospherejs.com/meteorhacks/async" target="_blank" rel="noopener">meteorhacks:async</a>。例如在<code>imports/api/method.js</code>中，对于下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'resources.remove'</span> (id, bucket, key) &#123;</span><br><span class="line">  <span class="keyword">const</span> client = <span class="keyword">new</span> qiniu.rs.Client();</span><br><span class="line">  client.remove(bucket, key, Meteor.bindEnvironment(<span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Meteor method resources.remove success'</span>);</span><br><span class="line">      Resources.remove(&#123; <span class="attr">_id</span>: id &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Meteor method resources.remove----&gt;'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>我们可以改写成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'resources.remove'</span> (id, bucket, key) &#123;</span><br><span class="line">  <span class="keyword">const</span> client = <span class="keyword">new</span> qiniu.rs.Client();</span><br><span class="line">  <span class="keyword">let</span> wrapQiniuClient = Async.wrap(client, [<span class="string">'remove'</span>,<span class="string">'stat'</span>,<span class="string">'move'</span>,<span class="string">'copy'</span>]);</span><br><span class="line">  wrapQiniuClient.remove(bucket, key);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Meteor method resources.remove success'</span>);</span><br><span class="line">  Resources.remove(&#123; <span class="attr">_id</span>: id &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>对于第一种方式，由于包裹在<code>client.remove()</code>里，错误信息不能直接回传到客户端，导致浏览器中没有错误提示。于是想到新建一个<code>Errors</code>数据库，如果有错误，就存到数据库，并且客户端订阅后，可以得到错误信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Meteor method resources.remove----&gt;'</span>);</span><br><span class="line"><span class="comment">// 在这里把错误信息存入数据库</span></span><br><span class="line">  Errors.insert(&#123;<span class="attr">err</span>: err.error,<span class="attr">code</span>: err.code&#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，有一些问题，比如在客户端执行<code>Meteor.call(&#39;resources.remove&#39;)</code>，我们不能判断是否调用成功，因为服务器端无法处理错误。这样我们就不能写逻辑：调用成功，返回到主页面，调用失败，显示错误信息。</p><p>对于第二种方式，我一开始没有正确的理解，也没有找到正确的方法。后来想到可以用<code>try/catch</code>语法，就赶紧试了一下，于是代码变成了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  wrapQiniuClient.remove(bucket, key);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Meteor method resources.remove success'</span>);</span><br><span class="line">  Resources.remove(&#123; <span class="attr">_id</span>: id &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> Meteor.Error(<span class="string">'removeError'</span>, err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里我们抛出错误，客户端是可以接收到的，我们的处理逻辑也通顺了，在<code>imports/ui/template/detail.js</code>中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Meteor.call(<span class="string">'resources.remove'</span>, id, bucket, key, (err) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resources.remove----&gt;'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(err.reason);</span><br><span class="line">    instance.error.set(<span class="string">'error'</span>, err.reason);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resources.remove success'</span>);</span><br><span class="line">    FlowRouter.go(<span class="string">'/main'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们把错误信息存到<code>ReactiveDict</code>里，在<code>helpers</code>中取出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Template.detail.helpers(&#123;</span><br><span class="line">  error() &#123;</span><br><span class="line">    <span class="keyword">const</span> instance = Template.instance();</span><br><span class="line">    <span class="keyword">const</span> error = instance.error.get(<span class="string">'error'</span>);</span><br><span class="line">    <span class="keyword">if</span> (!isEmpty(error)) &#123;</span><br><span class="line">      $(<span class="string">'.err'</span>).show();</span><br><span class="line">      $(<span class="string">'.err'</span>).fadeOut(<span class="number">5000</span>);</span><br><span class="line">      <span class="keyword">return</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>模板文件里<code>detail.html</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3 class=&quot;err&quot;&gt;操作失败：&#123;&#123;error.error&#125;&#125; 错误码：&#123;&#123;error.code&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure><p>这样，当有错误时，我们简单的用<code>jquery</code>来显示。</p><h3 id="小的问题"><a href="#小的问题" class="headerlink" title="小的问题"></a>小的问题</h3><p>尝试了几次之后，发现了一个问题，第一次的错误信息可以正常显示，而以后的错误信息不会再显示了，查找原因后发现，在调用<code>Meteor.call()</code>之前，我们要把<code>ReactiveDict</code>里的值设置为空,然后就能正常工作了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance.error.set(<span class="string">'error'</span>, <span class="string">''</span>);</span><br></pre></td></tr></table></figure><p>另外，我们也可以定义一个操作成功的提示信息，方法相同，这里就不在赘述了，不过注意这里也需要先设置为空，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance.success.set(<span class="string">'success'</span>, <span class="string">''</span>);</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>如果大家看的不是很明白，可以直接看源码，项目地址：<a href="https://github.com/wuyang910217/qiniu-manager" target="_blank" rel="noopener">qiniu-manager</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;七牛云&lt;/strong&gt; 的内容管理默认没有文件的缩略图，如果我们想找某一张图片就会很头疼，所以我用&lt;code&gt;Meteor&lt;/code&gt;做了一个小的demo，用来显示文件的缩略图，并有删除、移动、复制、下载等基本的操作功能。
    
    </summary>
    
      <category term="Tech" scheme="http://wuyang910217.github.io/categories/Tech/"/>
    
    
      <category term="meteor" scheme="http://wuyang910217.github.io/tags/meteor/"/>
    
      <category term="async" scheme="http://wuyang910217.github.io/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>meteor创建项目的准备工作</title>
    <link href="http://wuyang910217.github.io/2016/08/16/meteor-react-init.html"/>
    <id>http://wuyang910217.github.io/2016/08/16/meteor-react-init.html</id>
    <published>2016-08-16T14:42:58.000Z</published>
    <updated>2019-01-06T02:29:18.178Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="Nodejs的安装"><a href="#Nodejs的安装" class="headerlink" title="Nodejs的安装"></a>Nodejs的安装</h3><p>nodejs的安装一般比较流行的是用<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener"><code>nvm</code></a>版本管理工具，可以安装不同版本的nodejs，对于需要来回切换node版本的人来说，非常方便。<a id="more"></a>但是有这样一个问题，由于它只是安装在用户目录下，而不是全局，有时当我们查看node版本时，会出现node未安装的提示。一般情况下，我们的node版本并不需要改变，所以可以全局安装，这里我选用<a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener">NodeSource</a>来安装node,只需要两条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Using Ubuntu</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><p>我当前安装的版本为<code>v6.3.1</code>。</p><h3 id="Meteor的安装"><a href="#Meteor的安装" class="headerlink" title="Meteor的安装"></a>Meteor的安装</h3><p>Meteor的安装同样非常简单，只需要一条命令，然后等待系统自动安装即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://install.meteor.com/ | sh</span><br></pre></td></tr></table></figure><p>安装完成后，我们就可以创建项目，这里是一些有用的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">meteor help #查看帮助</span><br><span class="line">meteor --version #查看当前版本</span><br><span class="line">meteor node --version #查看meteor使用的node版本</span><br><span class="line">meteor create projectName #创建一个项目</span><br><span class="line">meteor run  #在本地启动项目</span><br><span class="line">meteor list  #列出项目使用的meteor包</span><br><span class="line">meteor add  packageName #添加一个包</span><br><span class="line">meteor mongo #进入mongo数据库，必须本地服务已经启动</span><br><span class="line">meteor build #打包meteor项目，用于部署到服务器上</span><br></pre></td></tr></table></figure><h3 id="项目的创建"><a href="#项目的创建" class="headerlink" title="项目的创建"></a>项目的创建</h3><p>使用以下命令，创建新的项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meteor create MeteorBlog</span><br></pre></td></tr></table></figure><p>初次创建项目，时间会有点长，因为其实Meteor非常庞大，查看一下meteor的大小：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh .meteor  #大约有1G，而且以后会越来越大</span><br></pre></td></tr></table></figure><p>创建完成后，进入其目录<code>cd MeteorBlog</code>，运行一下<code>meteor run</code>，在浏览器中打开本机3000端口，就能看到meteor默认的运行页面。</p><h3 id="删除默认UI模板blaze，安装react"><a href="#删除默认UI模板blaze，安装react" class="headerlink" title="删除默认UI模板blaze，安装react"></a>删除默认UI模板blaze，安装react</h3><p>Meteor默认的视图层模板是Blaze，我们不打算使用，所以删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meteor remove blaze-html-templates</span><br><span class="line">#删除后，页面将不能渲染，需要添加下面这个包</span><br><span class="line">meteor add static-html</span><br></pre></td></tr></table></figure><p>meteor创建新项目会生成一个<code>package.json文件</code>，说明meteor本身也是一个Node项目，我们需要执行<code>npm install</code>，来安装<code>meteor-node-stubs</code>这个依赖包。需要说明的是使用<code>npm install</code>安装的node包都存放在<code>node_modules</code>目录下。</p><p>然后安装<code>react</code>，参见<a href="https://guide.meteor.com/react.html" target="_blank" rel="noopener">meteor guide</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react react-dom</span><br></pre></td></tr></table></figure><p>到此为止，项目的前期准备工作差不多做完了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;Nodejs的安装&quot;&gt;&lt;a href=&quot;#Nodejs的安装&quot; class=&quot;headerlink&quot; title=&quot;Nodejs的安装&quot;&gt;&lt;/a&gt;Nodejs的安装&lt;/h3&gt;&lt;p&gt;nodejs的安装一般比较流行的是用&lt;a href=&quot;https://github.com/creationix/nvm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;nvm&lt;/code&gt;&lt;/a&gt;版本管理工具，可以安装不同版本的nodejs，对于需要来回切换node版本的人来说，非常方便。
    
    </summary>
    
      <category term="Tech" scheme="http://wuyang910217.github.io/categories/Tech/"/>
    
    
      <category term="meteor" scheme="http://wuyang910217.github.io/tags/meteor/"/>
    
      <category term="react" scheme="http://wuyang910217.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Meteor中accounts-github包的使用介绍</title>
    <link href="http://wuyang910217.github.io/2016/08/12/meteor-github-login.html"/>
    <id>http://wuyang910217.github.io/2016/08/12/meteor-github-login.html</id>
    <published>2016-08-12T11:19:30.000Z</published>
    <updated>2019-01-06T02:29:18.177Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Meteor中自带强大的账户系统，并有丰富的第三方账户登录包如<code>Github</code>，<code>Google</code>，<code>Twitter</code>等，让我们可以专注于主要业务需求的实现。但是它提供的样式单一，并且默认数据库<code>Meteor.users</code>的格式已经确定，不利于后期的扩展。<a id="more"></a>如果我们已经有自己的账户系统和用户数据库，可能需要统一数据库的格式。</p><p>本文主要有以下两个方面：</p><ol><li>使用<code>Meteor</code>提供的默认包来实现<code>Github账户登录</code>这个功能；</li><li>自己配置，并把格式化的用户信息存入<code>Meteor.users</code>数据库中。</li></ol><h3 id="Meteor默认账户系统介绍"><a href="#Meteor默认账户系统介绍" class="headerlink" title="Meteor默认账户系统介绍"></a>Meteor默认账户系统介绍</h3><p>新建一个项目如<em>github-login-demo</em>：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">meteor create github-login-demo</span><br><span class="line">cd  github-login-demo</span><br><span class="line"># 添加如下包</span><br><span class="line">meteor add accounts-ui</span><br><span class="line">meteor add accounts-password</span><br><span class="line">meteor add accounts-github</span><br></pre></td></tr></table></figure><p></p><p>现在我们已经有了基本的账户系统，在你的<code>main.html</code>文件的<code>body</code>标签中加入这一行：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&gt; loginButtons&#125;&#125;</span><br></pre></td></tr></table></figure><p></p><p>此时运行<code>meteor</code>命令，打开浏览器，就能看到一个登录按钮，如图所示，</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://image.wangjuntao.com/login-conf.png" alt="login-conf"></div><div class="image-caption">login-conf</div></figure><p>我们可以注册和登录用户，上面<code>github</code>登录的配置也很简单，只需按照提示，填入我们在<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">Github OAuth</a>申请的<strong>Client ID</strong>和<strong>Client Secret</strong>值。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://image.wangjuntao.com/github-conf.png" alt="github-conf"></div><div class="image-caption">github-conf</div></figure><p>完成后，我们就可以让用户使用<code>Github</code>账号登录了。</p><h3 id="自己配置用户登录信息"><a href="#自己配置用户登录信息" class="headerlink" title="自己配置用户登录信息"></a>自己配置用户登录信息</h3><p>现在我们的页面只能显示用户名，并且数据库的内容是默认生成好的，没有头像，仓库数量等信息，接下来我们就自己配置用户的数据库，来保存我们想要的内容。首先添加第三方服务配置包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meteor add service-configuration</span><br></pre></td></tr></table></figure><p>在html文件中，添加一个<code>button</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=&quot;login&quot;&gt;Github账户登录&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>在<code>server/github.js</code>中，添加配置项。具体内容，见Github地址(文章末尾)，通过响应按钮的点击事件，调用<code>client/main.js</code>里的<code>Meteor.loginWithGithub()</code>这个函数，我们就能实现用户的登录。</p><p><strong>需要说明的是</strong>，我们是作为第三方登录账号集成到user数据库中，因此需要判断用户是否是使用第三方直接登录，还是注册新账号。如果不用第三方登录，我们这里直接返回（也可以添加其他内容）。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!user.services.github) &#123;</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在<code>github.js</code>文件中，我们添加了<code>user.profile</code>用来储存一些我们想要的信息，停止<code>meteor</code>，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 清除以前的数据库内容</span><br><span class="line">meteor reset</span><br><span class="line"># 重新运行</span><br><span class="line">meteor</span><br></pre></td></tr></table></figure><p>现在点击按钮登录后，就会显现登录用户的一些信息，如图：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://image.wangjuntao.com/github-show.png" alt="show"></div><div class="image-caption">show</div></figure><p>默认的用户数据库格式是固定的，我们使用默认的账户系统再注册一个新用户，对比这两个用户的信息，可以看到都有<code>_id</code>,<code>createdAt</code>,<code>services</code>,<code>resume</code>字段（文档），而使用github账号的用户中还有<code>profile</code>字段，这正是我们储存我们想要的用户信息的地方。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://image.wangjuntao.com/user-db.png" alt="user-db"></div><div class="image-caption">user-db</div></figure><p>我们的<code>profile</code>字段看起来内容不多，其实<code>Github</code>返回的<code>json</code>内容很丰富，下面是完整的返回内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;login&quot;: &quot;wuyang910217&quot;,</span><br><span class="line">  &quot;id&quot;: 2918044,</span><br><span class="line">  &quot;avatar_url&quot;: &quot;https://avatars.githubusercontent.com/u/2918044?v=3&quot;,</span><br><span class="line">  &quot;gravatar_id&quot;: &quot;&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;https://api.github.com/users/wuyang910217&quot;,</span><br><span class="line">  &quot;html_url&quot;: &quot;https://github.com/wuyang910217&quot;,</span><br><span class="line">  &quot;followers_url&quot;: &quot;https://api.github.com/users/wuyang910217/followers&quot;,</span><br><span class="line">  &quot;following_url&quot;: &quot;https://api.github.com/users/wuyang910217/following&#123;/other_user&#125;&quot;,</span><br><span class="line">  &quot;gists_url&quot;: &quot;https://api.github.com/users/wuyang910217/gists&#123;/gist_id&#125;&quot;,</span><br><span class="line">  &quot;starred_url&quot;: &quot;https://api.github.com/users/wuyang910217/starred&#123;/owner&#125;&#123;/repo&#125;&quot;,</span><br><span class="line">  &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/wuyang910217/subscriptions&quot;,</span><br><span class="line">  &quot;organizations_url&quot;: &quot;https://api.github.com/users/wuyang910217/orgs&quot;,</span><br><span class="line">  &quot;repos_url&quot;: &quot;https://api.github.com/users/wuyang910217/repos&quot;,</span><br><span class="line">  &quot;events_url&quot;: &quot;https://api.github.com/users/wuyang910217/events&#123;/privacy&#125;&quot;,</span><br><span class="line">  &quot;received_events_url&quot;: &quot;https://api.github.com/users/wuyang910217/received_events&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;User&quot;,</span><br><span class="line">  &quot;site_admin&quot;: false,</span><br><span class="line">  &quot;name&quot;: &quot;wuyang&quot;,</span><br><span class="line">  &quot;company&quot;: null,</span><br><span class="line">  &quot;blog&quot;: null,</span><br><span class="line">  &quot;location&quot;: null,</span><br><span class="line">  &quot;email&quot;: &quot;wuyang910217@gmail.com&quot;,</span><br><span class="line">  &quot;hireable&quot;: true,</span><br><span class="line">  &quot;bio&quot;: null,</span><br><span class="line">  &quot;public_repos&quot;: 11,</span><br><span class="line">  &quot;public_gists&quot;: 0,</span><br><span class="line">  &quot;followers&quot;: 0,</span><br><span class="line">  &quot;following&quot;: 4,</span><br><span class="line">  &quot;created_at&quot;: &quot;2012-11-29T04:25:43Z&quot;,</span><br><span class="line">﻿  &quot;updated_at&quot;: &quot;2016-04-01T09:00:21Z&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请到这里查看所有代码</strong>： <a href="https://github.com/wuyang910217/github-login-demo" target="_blank" rel="noopener">github-login-demo</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>Meteor文档： <a href="http://docs.meteor.com/#/full/meteor_loginwithexternalservice" target="_blank" rel="noopener">loginWithGithub()</a>，<a href="http://docs.meteor.com/#/full/accounts_oncreateuser" target="_blank" rel="noopener">onCreateUser()</a></li><li>Meteor guide : <a href="http://guide.meteor.com/accounts.html" target="_blank" rel="noopener">Accounts</a></li></ul><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>本文内容基于<code>accounts-password</code>这个包自带的<em>Meteor.users</em>数据库，并没有重新构建新的数据库格式。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Meteor中自带强大的账户系统，并有丰富的第三方账户登录包如&lt;code&gt;Github&lt;/code&gt;，&lt;code&gt;Google&lt;/code&gt;，&lt;code&gt;Twitter&lt;/code&gt;等，让我们可以专注于主要业务需求的实现。但是它提供的样式单一，并且默认数据库&lt;code&gt;Meteor.users&lt;/code&gt;的格式已经确定，不利于后期的扩展。
    
    </summary>
    
      <category term="Tech" scheme="http://wuyang910217.github.io/categories/Tech/"/>
    
    
      <category term="meteor" scheme="http://wuyang910217.github.io/tags/meteor/"/>
    
      <category term="github" scheme="http://wuyang910217.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>chrome浏览器下好用的插件</title>
    <link href="http://wuyang910217.github.io/2016/08/10/useful-chrome-plugins.html"/>
    <id>http://wuyang910217.github.io/2016/08/10/useful-chrome-plugins.html</id>
    <published>2016-08-10T11:19:30.000Z</published>
    <updated>2019-01-06T02:29:18.183Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>Chrome</code>浏览器下好用的扩展程序非常多，在此给大家分享我目前安装的一些插件．这里只是给出了名字，只需到网上应用店搜索即可．<a id="more"></a></p><h3 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h3><ol><li><code>Adblock Plus</code>免受广告的打扰　👍</li><li><code>Yet another flags</code>显示网站所在地区的小工具</li><li><code>LastPass</code>管理你的网站密码，从此不怕忘记你的账号和密码了 👍</li><li><code>OneTab</code>众多标签页没有看完，下次还能接着看 👍</li><li><code>Currently</code>把<code>New Tab</code>替换成漂亮的样式，可以显示时间和天气 👍</li><li><code>TransIt</code>在线取词翻译 👍</li><li><code>One-Click Extensions Manager</code>装的插件有点多，浏览器变卡了，不用担心，一键管理所有的其他插件，随时启用和停止 👍</li><li><code>BookMark Manager</code> 管理你的标签</li><li><code>Grammarly</code> 检查你输入的文字的拼写和语法</li><li><code>Short URL</code> 短网址 👍</li><li><code>Video Downloader Professional</code> 提供视频下载</li><li><code>Awesome screenshot</code> 网页截图，提供简单修改功能，如添加文字和箭头，也可本地上传图片 👍</li></ol><h3 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h3><ol><li><code>Octotree</code>在左侧显示<code>github</code>上项目的结构树 👍</li><li><code>Wappalyzer</code>显示网站所使用的技术，如框架，服务器，非常强大 👍</li><li><code>ColorZilla</code>别人网站的颜色好看？那不copy过来 👍</li><li><code>JSON Viewer</code>返回漂亮易读的json格式 👍</li><li><code>DHC REST Client</code>在浏览器中测试http请求 👍</li><li><code>Alexa Traffic Rank</code>查询网站的排名</li><li><code>WhatFont</code>显示网站上使用的字体的名称 👍</li><li><code>React Developer Tools,Redux DevsTool</code>开发工具 👍</li><li><code>TypeWonder</code>测试各种网站字体</li><li><code>Responsive Web Design Tester</code>提供响应式网站的测试 👍</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Chrome&lt;/code&gt;浏览器下好用的扩展程序非常多，在此给大家分享我目前安装的一些插件．这里只是给出了名字，只需到网上应用店搜索即可．
    
    </summary>
    
      <category term="Tools" scheme="http://wuyang910217.github.io/categories/Tools/"/>
    
    
      <category term="chrome" scheme="http://wuyang910217.github.io/tags/chrome/"/>
    
      <category term="plugins" scheme="http://wuyang910217.github.io/tags/plugins/"/>
    
  </entry>
  
  <entry>
    <title>修改simple:highlight.js代码高亮的样式</title>
    <link href="http://wuyang910217.github.io/2016/08/08/add-local-meteor-package.html"/>
    <id>http://wuyang910217.github.io/2016/08/08/add-local-meteor-package.html</id>
    <published>2016-08-08T11:19:30.000Z</published>
    <updated>2019-01-06T02:29:18.168Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>Meteor版本：1.2</strong></p><p>最近使用Meteor过程中，发现<code>markdown</code>包中的代码高亮几乎没有样式，于是在网上找了<code>highlight.js</code>这个代码高亮插件<a id="more"></a>，下载的文件，分别放在<code>client/lib/js</code>和<code>client/lib/css</code>目录中，按网站介绍的配置后，没有效果，看来是不能很好的识别，只好到<a href="https://atmospherejs.com/" target="_blank" rel="noopener">Atmospherejs</a>搜索已经和<em>Meteor</em>集成好的包。</p><p>发现了这个包<a href="https://atmospherejs.com/simple/highlight.js" target="_blank" rel="noopener">simple-highlight.js</a>，并且是和<code>markdown</code>集成好的，不用另外配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meteor add simple-highlight.js</span><br></pre></td></tr></table></figure><p>不过查看效果，并不是很好看，到它的<a href="https://github.com/stubailo/meteor-highlight.js" target="_blank" rel="noopener">Github项目</a>主页浏览源码，发现它只有一种默认样式：<code>github.css</code>，就想到替换这个默认样式，在<em>highlight.js</em>官网找到了<code>zenburn.css</code>这个样式，最简单的方法就是直接替换<em>css文件</em>的内容，不过不太高大上，于是就需要我们修改它的包，制作成我们自己的包。</p><h3 id="修改源码包"><a href="#修改源码包" class="headerlink" title="修改源码包"></a>修改源码包</h3><p>在<strong>项目主目录中</strong>，首先我们需要把源码下载到本地，并打开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/stubailo/meteor-highlight.js.git</span><br><span class="line">cd meteor-highlight.js</span><br><span class="line">subl .</span><br></pre></td></tr></table></figure><p>修改<code>package.js</code>里面的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Package.describe(&#123;</span><br><span class="line">  summary: &quot;Code highlighting integrated with the markdown package&quot;,</span><br><span class="line">  version: &quot;1.2.0&quot;,</span><br><span class="line">  name: &quot;simple:highlight.js&quot;,</span><br><span class="line">  git: &quot;https://github.com/stubailo/meteor-highlight.js&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>主要是修改<code>name</code>，其他内容可以不变，例如我修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Package.describe(&#123;</span><br><span class="line">  summary: &quot;modify---&gt;Code highlighting integrated with the markdown package&quot;,</span><br><span class="line">  version: &quot;1.2.0&quot;,</span><br><span class="line">  name: &quot;modify:simple:highlight.js&quot;,</span><br><span class="line">  git: &quot;https://github.com/stubailo/meteor-highlight.js&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>Package.onUse()</code>中修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">api.addFiles(&quot;github.css&quot;);</span><br><span class="line">#修改为</span><br><span class="line">api.addFiles(&quot;zenburn.css&quot;);</span><br></pre></td></tr></table></figure><p>然后只需要删除<em>github.css</em>文件，并添加<em>zenburn.css</em>文件。</p><h3 id="制作本地包"><a href="#制作本地包" class="headerlink" title="制作本地包"></a>制作本地包</h3><p>在<strong>项目主目录中</strong>新建<em>packages</em>文件夹，注意<code>Meteor</code>的本地添加包都在这个文件夹下。把<code>meteor-highlight.js</code>这个文件夹添加进来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir packages</span><br><span class="line">mv meteor-highlight.js  packages/modify-highlight.js</span><br></pre></td></tr></table></figure><p>这里我把文件夹名称修改为<em>modify-highlight.js</em>，也可以不修改。</p><p>然后运行以下命令，把本地包添加到项目中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meteor add modify:simple:highlight.js</span><br></pre></td></tr></table></figure><p>注意这个包名就是<code>name</code>字段里的值。然后运行<code>meteor list</code>命令，就能看到我们的包已经添加进来，并且包名后面有个<code>+</code>号，说明是本地添加的包。</p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>你也可以在<a href="https://atmospherejs.com/" target="_blank" rel="noopener">Atmospherejs</a>上发布修改过的包，不过意义不是很大,毕竟我们只是修改了下css样式。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Meteor版本：1.2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;最近使用Meteor过程中，发现&lt;code&gt;markdown&lt;/code&gt;包中的代码高亮几乎没有样式，于是在网上找了&lt;code&gt;highlight.js&lt;/code&gt;这个代码高亮插件
    
    </summary>
    
      <category term="Tech" scheme="http://wuyang910217.github.io/categories/Tech/"/>
    
    
      <category term="highlight" scheme="http://wuyang910217.github.io/tags/highlight/"/>
    
      <category term="meteor" scheme="http://wuyang910217.github.io/tags/meteor/"/>
    
  </entry>
  
  <entry>
    <title>超简单，利用Passenger部署Meteor到Ubuntu14.04服务器</title>
    <link href="http://wuyang910217.github.io/2016/08/06/deploy-meteor-app.html"/>
    <id>http://wuyang910217.github.io/2016/08/06/deploy-meteor-app.html</id>
    <published>2016-08-06T11:19:30.000Z</published>
    <updated>2019-01-06T02:29:18.169Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>目前能够方便地部署Meteor app的方法还不多，一般都是用官网的<code>Galaxy</code>或者<code>meteor up</code>或者按照部署<code>Nodejs</code>服务器的方式。而如果我们想要使用<code>Nginx</code>作为Web服务器，其中配置的步骤又很繁琐，那有没有好的开源项目或者平台能够帮助我们减轻痛苦呢？答案是必须的。下面就隆重请出今天的主角——<code>PhusionPassenger</code><a id="more"></a>。</p><h3 id="Passenger简介"><a href="#Passenger简介" class="headerlink" title="Passenger简介"></a>Passenger简介</h3><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://image.wangjuntao.com/passenger.png?imageView2/2/w/600/h/300/interlace/0/q/100" alt="passenger"></div><div class="image-caption">passenger</div></figure><p><strong>Passenger</strong> 想必对于<code>Rails</code>开发者都很熟悉了，使用<code>Passenger+Apache/Nginx</code>配置<code>Rails Web</code>程序也是主流之一。</p><p><strong>没想到如今竟然也支持<code>Meteor</code>了</strong>（其实不止Meteor，还支持Nodejs和Python）。从他的官网介绍中可以看到——<code>A web server and application server for your web apps</code>，其实就是整合了web服务器和后端语言所需要的各种依赖包。而且他的官网有非常详细的教程，本文就是按照此教程一步步走下来的，其中也记录了我部署过程中遇到的一些问题和解决方法。话不多说，首先奉上地址：</p><ul><li>Passenger官网 <a href="https://www.phusionpassenger.com/" target="_blank" rel="noopener">点我</a></li><li>Meteor部署详细步骤地址 <a href="https://www.phusionpassenger.com/library/walkthroughs/deploy/meteor/" target="_blank" rel="noopener">点我</a></li><li>Github项目wiki地址 <a href="https://github.com/phusion/passenger/wiki" target="_blank" rel="noopener">点我</a></li></ul><h3 id="步骤一-选择一台云服务器"><a href="#步骤一-选择一台云服务器" class="headerlink" title="步骤一 选择一台云服务器"></a>步骤一 选择一台云服务器</h3><p>国外一般用亚马逊或Digital Ocean的云服务器，这里我们就选择通用的运行Linux的服务器，配置差不多都一样。我使用的是阿里云运行Ubuntu14.04的服务器，当然CentOS也支持。</p><h3 id="步骤二-选择Passenger集成包"><a href="#步骤二-选择Passenger集成包" class="headerlink" title="步骤二 选择Passenger集成包"></a>步骤二 选择Passenger集成包</h3><p>官网总共提供了三种模式：与Nginx集成，与Apache集成，Standalone。三种模式的介绍与区别大家看官网，这里我选择了Nginx集成模式。</p><h3 id="步骤三-选择Passenger版本"><a href="#步骤三-选择Passenger版本" class="headerlink" title="步骤三 选择Passenger版本"></a>步骤三 选择Passenger版本</h3><p>有开源版和企业版，企业版要收费的，所以我选择了<code>open source</code>。</p><h3 id="步骤四-安装Nodejs环境"><a href="#步骤四-安装Nodejs环境" class="headerlink" title="步骤四 安装Nodejs环境"></a>步骤四 安装Nodejs环境</h3><p><strong>说明 以下都是在你买的服务器上操作的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install -y curl apt-transport-https ca-certificates &amp;&amp;</span><br><span class="line">curl --fail -ssL -o setup-nodejs https://deb.nodesource.com/setup_0.12 &amp;&amp;</span><br><span class="line">sudo bash setup-nodejs &amp;&amp;</span><br><span class="line">sudo apt-get install -y nodejs build-essential</span><br></pre></td></tr></table></figure><p>经过此过程，安装的Nodejs版本是<strong>0.12.10</strong>，大家也可以从<a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener">NodeSource</a>安装其他的版本如v4.3.1，或者使用<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>版本管理脚本。不过一开始在我尝试使用更高的版本时，老是出问题，后来发现<strong>Meteor不支持更高的Nodejs版本</strong>，所以大家尽量使用v0.12或者以下的版本吧！</p><p>另外，使用<code>nvm</code>版本管理安装的Nodejs，其实安装到了你的用户目录下，以后使用不需要<code>sudo</code>命令，方便。而上面的步骤会全局安装Nodejs，以后安装包时，会出现权限问题，大家自行选择。</p><h3 id="步骤五-安装Passenger"><a href="#步骤五-安装Passenger" class="headerlink" title="步骤五 安装Passenger"></a>步骤五 安装Passenger</h3><p>还是先选择你的服务器安装的系统类型和版本，这里我选择的是Ubuntu14.04.开始安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 添加钥匙和apt包</span><br><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7</span><br><span class="line">sudo apt-get install -y apt-transport-https ca-certificates</span><br><span class="line">sudo sh -c &apos;echo deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main &gt; /etc/apt/sources.list.d/passenger.list&apos;</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># 安装Passenger和Nginx</span><br><span class="line">sudo apt-get install -y nginx-extras passenger</span><br></pre></td></tr></table></figure><p>安装完成后,打开<code>vim /etc/nginx/nginx.conf</code>,并取消下面两行的注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># passenger_root /some-filename/locations.ini;</span><br><span class="line"># passenger_ruby /usr/bin/passenger_free_ruby;</span><br></pre></td></tr></table></figure><p>然后重启Nginx服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><p>查看是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/passenger-config validate-install</span><br></pre></td></tr></table></figure><p>查看Passenger运行情况(不是必须)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/sbin/passenger-memory-stats</span><br></pre></td></tr></table></figure><p>最后重新执行一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>目前都还是准备工作，下面开始上正餐了。</p><h3 id="步骤六-部署Meteor-App"><a href="#步骤六-部署Meteor-App" class="headerlink" title="步骤六 部署Meteor App"></a>步骤六 部署Meteor App</h3><p><strong>说明 以下操作是在你的本地机器上</strong></p><p>首先打包你的Meteor程序包<code>meteor bundle package.tar.gz</code>,此处使用的是<code>bundle</code>命令，会出现提示说这个命令已经被<code>build</code>命令取代了，不过这里因为<code>build</code>命令会把<code>iOS and Android</code>移动平台的包一起打包进去，而我们并不需要。<code>package.tar.gz</code>是你取的压缩包的名字和格式。执行结束后，会在当前目录下生成。<br>然后传到服务器上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp package.tar.gz  adminuser@yourserver.com:</span><br><span class="line"># 例如（最好使用IP地址，注意最后的冒号）</span><br><span class="line">scp package.tar.gz root@120.24.72.4:</span><br></pre></td></tr></table></figure><p>登陆到服务器：<code>ssh root@120.24.72.4</code>(需要先下载ssh)</p><p><strong>说明 以下操作是在你的远程服务器上</strong></p><p>首先创建一个普通用户如<code>blog</code>（如果你以前已经创建过，可以省略这一步），按照提示输入密码（<strong>注意：不是你的root账户密码</strong>）<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser blog</span><br></pre></td></tr></table></figure><p></p><p>然后确保以后可以不用密码登陆服务器（不是必须）<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p ~blog/.ssh</span><br><span class="line">touch $HOME/.ssh/authorized_keys</span><br><span class="line">sudo sh -c &quot;cat $HOME/.ssh/authorized_keys &gt;&gt; ~blog/.ssh/authorized_keys&quot;</span><br><span class="line">sudo chown -R blog: ~blog/.ssh</span><br><span class="line">sudo chmod 700 ~blog/.ssh</span><br><span class="line">sudo sh -c &quot;chmod 600 ~blog/.ssh/*&quot;</span><br></pre></td></tr></table></figure><p></p><p>现在<code>blog</code>用户是没有root权限的，不能使用<code>sudo</code>命令，最好把<code>blog</code>添加到<code>sudoers</code>里，输入<code>visudo</code>，找到：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># User privilege specification</span><br><span class="line">root    ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><p></p><p>在下面添加一句：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># User privilege specification</span><br><span class="line">root    ALL=(ALL:ALL) ALL</span><br><span class="line">blog     ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><p></p><p>切换到<code>blog</code>用户（以后直接使用这个用户就行，不用在使用root）<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u blog -H bash -l</span><br></pre></td></tr></table></figure><p></p><p>然后你就能使用<code>sudo</code>命令了，<strong>注意，你的root用户密码不要和你的普通用户密码一样，以后需要输入密码时，直接输入普遍用户的<br>密码就可以了，不需要再使用root用户的密码。</strong></p><p>接下来：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建程序使用的目录（名字任意）</span><br><span class="line">sudo mkdir -p /var/www/blog</span><br><span class="line"># 然后进入</span><br><span class="line">cd /var/www/blog/</span><br><span class="line"># 解压到此目录</span><br><span class="line">sudo tar zxf ~/package.tar.gz</span><br></pre></td></tr></table></figure><p></p><p>安装<code>mongodb</code><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y mongodb</span><br></pre></td></tr></table></figure><p></p><p>此处最好进入到<code>/bundle</code>目录下，创建两个空目录,后面要用到<code>public</code>目录，<br>而<code>tmp</code>目录可以创建<code>restart.txt</code>文件，用于Nginx重启（现在不需要）：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir tmp public</span><br></pre></td></tr></table></figure><p></p><p>接着进入到<code>cd /programs/server</code>目录下，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install --production</span><br></pre></td></tr></table></figure><p>安装完成后，创建<code>Nginx</code>配置文件：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-enabled/blog.conf</span><br><span class="line"># 后面的文件名任意</span><br></pre></td></tr></table></figure><p></p><p>写入如下内容：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name yourserver.com;</span><br><span class="line">    # 写你的域名 或者直接写IP</span><br><span class="line"></span><br><span class="line">    # 你的程序的public目录，就是刚才创建的空目录</span><br><span class="line">    root /var/www/blog/bundle/public;</span><br><span class="line"></span><br><span class="line">    # 开启Passenger</span><br><span class="line">    passenger_enabled on;</span><br><span class="line">    # 说明是个meteor app</span><br><span class="line">    passenger_app_type node;</span><br><span class="line">    passenger_startup_file main.js;</span><br><span class="line"></span><br><span class="line">    # MongoDB的位置，此处不用改就可以，后面的文件名任意，但不能有&apos;.&apos;，如myapp.db</span><br><span class="line">    passenger_env_var MONGO_URL mongodb://localhost:27017/blogdb;</span><br><span class="line">    # 你的根url，也可以是IP</span><br><span class="line">    passenger_env_var ROOT_URL http://yourserver.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后重启<code>Nginx</code><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><p></p><p>然后你可以访问你的网站了：</p><ol><li>如果能直接访问，那只有恭喜你了</li><li>如果显示<code>500</code>错误，说明<code>Passenger</code>配置过程出错，没有启动，你可以再仔细从头来一遍</li><li>如果出现<code>Passenger</code>提示的错误信息，如<code>We&#39;re sorry, but something went wrong.</code>说明Passenger启动了，但是程序内部有误，我就是在第三种情况下困扰了好久，这时就要查看<code>Nginx</code>错误日志了：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /var/log/nginx/error.log</span><br></pre></td></tr></table></figure><p>也可以查看<code>Passenger</code>的输出信息，在<code>/var/log/</code>目录下，有很多<code>html</code>文件，你可以用<code>cat</code>命令查看。然后根据错误信息Google之，可能遇到的问题不一样，下面是我遇到的：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/your-app-path/bundle/programs/server/node_modules/fibers/future.js:245</span><br><span class="line">                        throw(ex);</span><br><span class="line">                              ^</span><br><span class="line">Error: Module did not self-register.</span><br><span class="line">    at Error (native)</span><br><span class="line">    at Module.load (module.js:355:32)</span><br><span class="line">    at Function.Module._load (module.js:310:12)</span><br><span class="line">    at Module.require (module.js:365:17)</span><br><span class="line">    at require (module.js:384:17)</span><br><span class="line">    at bindings (/your-app-path/bundle/programs/server/npm/npm</span><br><span class="line">      -bcrypt/node_modules/bcrypt/node_modules/</span><br><span class="line">      bindings/bindings.js:74:15)</span><br><span class="line">    at Object.&amp;lt;anonymous&amp;gt; (/your-app-path/bundle/programs/server/npm/</span><br><span class="line">      npm-bcrypt/node_modules/bcrypt/bcrypt.js:3:35)</span><br><span class="line">    at Module._compile (module.js:460:26)</span><br><span class="line">    at Object.Module._extensions..js (module.js:478:10)</span><br><span class="line">    at Module.load (module.js:355:32)</span><br></pre></td></tr></table></figure><p></p><p>在网上搜了许多方法，归纳一下就是这两个包<code>fibers</code>和<code>bcrypt</code>的依赖关系，需要重新安装，不过我试了N多遍，还是不行，就在我要放弃的时候，<br>又重新仔细看了一遍错误原因，才发现<code>bcrypt</code>这个包的位置不在<code>bundle/programs/server/node_modules/</code>目录下，而是在<code>/bundle/programs/server/npm/npm-bcrypt/node_modules/</code>目录下，然后瞬间看到一丝希望，赶忙删除<code>/bcrypt</code>这个目录，重新运行<code>npm install bcrypt</code>安装了新的包，最后<br>重启<code>Nginx</code>，访问我的域名，真的就成功了。此刻，我真的想哭。<strong>泪的教训：看错误日志一定要仔细，仔细，再仔细</strong></p><p>总结一下：</p><ol><li>运行<code>npm install --production</code>后，<code>fibers</code>和<code>bcrypt</code>这两个包应该就在正确的位置了</li><li>但由于依赖问题（我猜）不能工作，安装的<code>fibers</code>的版本是<code>1.0.5</code>，<code>bcrypt</code>的版本是<code>0.7.8</code></li><li>所以我只把<code>/bundle/programs/server/npm/npm-bcrypt/node_modules/</code>目录下的<code>/bcrypt</code>文件夹删除</li><li>然后重新安装<code>npm install bcrypt</code>（注意是在这目录下），就会安装<code>0.8.5版本</code>的<code>bcrypt</code>了</li><li>然后问题就能解决，最后重启<code>Nginx</code></li><li>注意我没有重新安装<code>fibers</code>包</li></ol><h3 id="步骤七-你的程序需要更新时"><a href="#步骤七-你的程序需要更新时" class="headerlink" title="步骤七  你的程序需要更新时"></a>步骤七 你的程序需要更新时</h3><p>当我们更新程序后，需要上传新的打包好的文件，并再次部署，也可以编写自动化脚本，帮助你处理。这部分内容请大家直接看官网的步骤，我这里不再赘述了。</p><h3 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h3><p><code>Passenger</code>还能做更多，比如一台服务器可以同时运行多个<code>Meteor app</code>，监控你的内存和CPU，更多的配置项和优化功能，错误处理和调试等。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可以看到，使用<code>Passenger</code>真的很方便，不用再头疼<code>Nginx</code> 的配置了，极大地节省了你的时间，强烈推荐大家使用。</p><p>如果你遇到了其他问题，并且不能解决，可以联系我。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;目前能够方便地部署Meteor app的方法还不多，一般都是用官网的&lt;code&gt;Galaxy&lt;/code&gt;或者&lt;code&gt;meteor up&lt;/code&gt;或者按照部署&lt;code&gt;Nodejs&lt;/code&gt;服务器的方式。而如果我们想要使用&lt;code&gt;Nginx&lt;/code&gt;作为Web服务器，其中配置的步骤又很繁琐，那有没有好的开源项目或者平台能够帮助我们减轻痛苦呢？答案是必须的。下面就隆重请出今天的主角——&lt;code&gt;PhusionPassenger&lt;/code&gt;
    
    </summary>
    
      <category term="Tech" scheme="http://wuyang910217.github.io/categories/Tech/"/>
    
    
      <category term="meteor" scheme="http://wuyang910217.github.io/tags/meteor/"/>
    
      <category term="passenger" scheme="http://wuyang910217.github.io/tags/passenger/"/>
    
  </entry>
  
  <entry>
    <title>hexo+indigo搭建materail design风格的博客网站</title>
    <link href="http://wuyang910217.github.io/2016/08/05/hexo-blog-theme-by-indigo.html"/>
    <id>http://wuyang910217.github.io/2016/08/05/hexo-blog-theme-by-indigo.html</id>
    <published>2016-08-05T11:19:30.000Z</published>
    <updated>2019-01-06T02:29:18.175Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>现在使用<code>hexo</code>搭建一个静态<code>blog</code>网站真是几分钟的事，并且各种主题随意使用，对于不想折腾，仅仅作为一个记录工作和学习的工具，实在是太适合了．<a id="more"></a>下面是一些配置文件的记录．这里我使用的是谷歌<code>materail design</code>风格的主题<code>indigo</code>，项目地址：<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">github</a></p><h3 id="hexo安装与常见命令"><a href="#hexo安装与常见命令" class="headerlink" title="hexo安装与常见命令"></a>hexo安装与常见命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//　全局安装hexo，Linux系统可能需要sudo权限</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">// 新建项目命名为blog</span><br><span class="line">hexo init blog</span><br><span class="line">// 后面不用加.md</span><br><span class="line">hexo new &apos;post-title&apos;</span><br><span class="line">// 本地启动</span><br><span class="line">hexo server</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在<code>_config.yml</code>文件中，可以修改大部分配置信息，另外一些要在<code>themes/indigo/_config.yml</code>文件中进行修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">wuyang的个人博客</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Live</span> <span class="string">long</span> <span class="string">and</span> <span class="string">Prosper!</span></span><br><span class="line"><span class="attr">description:</span> <span class="bullet">-记录学习和生活过程-</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">wuyang</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">wuyang910217@gmail.com</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">meteor</span> <span class="string">react</span> <span class="string">book</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">  meta:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  pages:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    slug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    categories:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'*.min.css'</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mangle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  output:</span></span><br><span class="line"><span class="attr">  compress:</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'*.min.js'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://wuyang910217.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">indigo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/wuyang910217/wuyang910217.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-theme-indigo</span></span><br><span class="line"><span class="comment"># https://github.com/yscoder/hexo-theme-indigo</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">1.1</span><span class="number">.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加新菜单项遵循以下规则</span></span><br><span class="line"><span class="comment"># menu:</span></span><br><span class="line"><span class="comment">#  link:               fontawesome图标，省略前缀，本主题前缀为 icon-，必须</span></span><br><span class="line"><span class="comment">#    text: About       菜单显示的文字，如果省略即默认与图标一致，首字母会转大写</span></span><br><span class="line"><span class="comment">#    url: /about       链接，绝对或相对路径，必须。</span></span><br><span class="line"><span class="comment">#    target: _blank    是否跳出，省略则在当前页面打开</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span></span><br><span class="line"><span class="attr">    text:</span> <span class="string">主页</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  archives:</span></span><br><span class="line"><span class="attr">    text:</span> <span class="string">归档</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="attr">    text:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/tags</span></span><br><span class="line"><span class="attr">  th-list:</span></span><br><span class="line"><span class="attr">    text:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/categories</span></span><br><span class="line"><span class="attr">  github:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">https://github.com/wuyang910217</span></span><br><span class="line"><span class="attr">    target:</span> <span class="string">_blank</span></span><br><span class="line"><span class="attr">  twitter:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">https://twitter.com/wuyangJT</span></span><br><span class="line"><span class="attr">    target:</span> <span class="string">_blank</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#你的头像url</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/img/logo.jpg</span></span><br><span class="line"><span class="comment">#favicon</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># email</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">wuyang910217@gamil.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Android L Chrome 浏览器状态栏颜色</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">'#3F51B5'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面标题</span></span><br><span class="line"><span class="attr">tags_title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archives_title:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">categories_title:</span> <span class="string">categories</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章截断</span></span><br><span class="line"><span class="attr">excerpt_render:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">excerpt_length:</span> <span class="number">150</span></span><br><span class="line"><span class="attr">excerpt_link:</span> <span class="string">阅读全文...</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">archive_yearly:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启分享</span></span><br><span class="line"><span class="attr">share:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启打赏，关闭 reward: false</span></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line"><span class="attr">  title:</span> <span class="string">谢谢打赏~</span></span><br><span class="line"><span class="attr">  wechat:</span> <span class="string">/img/wechat.png</span>     <span class="comment">#微信，关闭设为 false</span></span><br><span class="line"><span class="attr">  alipay:</span> <span class="string">/img/alipay.png</span>     <span class="comment">#支付宝，关闭设为 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启搜索</span></span><br><span class="line"><span class="attr">search:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否大屏幕下文章页隐藏导航</span></span><br><span class="line"><span class="attr">hideMenu:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启toc</span></span><br><span class="line"><span class="comment">#toc: false</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">  list_number:</span> <span class="literal">true</span>  <span class="comment"># 是否显示数字排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文章页版权声明内容，hexo中所有变量及辅助函数等均可调用，具体请查阅 hexo.io</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="string">转载请注明出处：&lt;a</span> <span class="string">href="&lt;%-</span> <span class="string">url_for(page.path).replace(/index\.html$/,</span> <span class="string">''</span><span class="string">)</span> <span class="string">%&gt;"</span> <span class="string">target="_blank"</span> <span class="string">rel="external"&gt;&lt;%-</span> <span class="string">url.replace(/index\.html$/,</span> <span class="string">''</span><span class="string">)</span> <span class="string">%&gt;&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#站长统计，如要开启，输入CNZZ站点id，如 cnzz: 1255152447</span></span><br><span class="line"><span class="attr">cnzz:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Miscellaneous</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># less</span></span><br><span class="line"><span class="attr">less:</span></span><br><span class="line"><span class="attr">  compress:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">source/css/style.less</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key</span></span><br><span class="line"><span class="attr">duoshuo:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论</span></span><br><span class="line"><span class="attr">disqus_shortname:</span> <span class="string">wuyangwang</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 规范网址</span></span><br><span class="line"><span class="comment"># 让搜索引擎重定向你的不同域名、不同子域、同域不同目录的站点到你期望的路径</span></span><br><span class="line"><span class="comment"># https://support.google.com/webmasters/answer/139066</span></span><br><span class="line"><span class="comment"># 假设配置为 canonical: http://imys.net，那么从搜索引擎中 www.imys.net 进入会重定向到 imys.net</span></span><br><span class="line"><span class="attr">canonical:</span> <span class="attr">http://wuyang910217.github.io/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版权起始年份</span></span><br><span class="line"><span class="attr">since_year:</span></span><br></pre></td></tr></table></figure><p>在<code>scaffolds/post.md</code>文件下，让它生成默认的<code>categories</code>和<code>tags</code>：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: default tech</span><br><span class="line">tags: [hexo1,hexo2]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="一些修改和总结"><a href="#一些修改和总结" class="headerlink" title="一些修改和总结"></a>一些修改和总结</h3><ul><li>在每个md文件的开头都有date，时间是可以修改的</li><li>文章截取摘要：正文中添加<!--more-->，会截取其前面的内容，不加，默认为150个字</li><li>可以添加有用的插件如SEO优化，字数统计等</li></ul><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>网上的教程很多，不过最好首先按照其官方文档和所使用的主题的文档进行操作，遇到问题再上网搜索解决办法．</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jan 06 2019 10:55:05 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;现在使用&lt;code&gt;hexo&lt;/code&gt;搭建一个静态&lt;code&gt;blog&lt;/code&gt;网站真是几分钟的事，并且各种主题随意使用，对于不想折腾，仅仅作为一个记录工作和学习的工具，实在是太适合了．
    
    </summary>
    
      <category term="Tech" scheme="http://wuyang910217.github.io/categories/Tech/"/>
    
    
      <category term="hexo" scheme="http://wuyang910217.github.io/tags/hexo/"/>
    
      <category term="indigo" scheme="http://wuyang910217.github.io/tags/indigo/"/>
    
  </entry>
  
</feed>
